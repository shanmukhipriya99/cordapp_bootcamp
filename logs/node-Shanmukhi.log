[INFO ] 2020-04-14T05:44:37,530Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-054436.588/custom-cordapp_1_5_9e2f8ffc-3e41-459f-a4f9-5c8d52ceb787.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T05:44:37,657Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-054436.588/custom-cordapp_1_5_9e2f8ffc-3e41-459f-a4f9-5c8d52ceb787.jar {}
[INFO ] 2020-04-14T05:48:26,324Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-054825.319/custom-cordapp_1_5_7e6503ff-4b98-42b4-b74c-a3831c7082b8.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T05:48:26,517Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-054825.319/custom-cordapp_1_5_7e6503ff-4b98-42b4-b74c-a3831c7082b8.jar {}
[INFO ] 2020-04-14T05:52:55,812Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-055254.783/custom-cordapp_1_5_eea3bc25-16c7-4d26-ad3b-fecb1bc8531e.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T05:52:55,959Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-055254.783/custom-cordapp_1_5_eea3bc25-16c7-4d26-ad3b-fecb1bc8531e.jar {}
[WARN ] 2020-04-14T05:52:58,749Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:52:58,766Z [Test worker] contracts.AttachmentConstraint. - Found state bootcamp.TokenContract that is constrained by the insecure: AlwaysAcceptAttachmentConstraint. {}
[WARN ] 2020-04-14T05:53:02,321Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:02,348Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:02,354Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:02,471Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:02,478Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T05:53:02,480Z [Test worker] internal.Verifier. - Error validating transaction D6B6061E2D2375F9BFE3ED03C1CB4CE93A21D590BE76FD687181B5EB7EFBA6E9. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero inputs
	at bootcamp.TokenContract.verify(TokenContract.java:15) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T05:53:02,491Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:02,494Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T05:53:02,495Z [Test worker] internal.Verifier. - Error validating transaction D6B6061E2D2375F9BFE3ED03C1CB4CE93A21D590BE76FD687181B5EB7EFBA6E9. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have zero inputs
	at bootcamp.TokenContract.verify(TokenContract.java:15) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresZeroInputsInTheTransaction$0(ContractTests.java:34) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresZeroInputsInTheTransaction(ContractTests.java:29) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T05:53:02,587Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:02,614Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:04,304Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:53:04,309Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T05:54:25,990Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-055425.097/custom-cordapp_1_5_44f97ae2-c6ea-4a79-bff9-d67ae4b92241.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T05:54:26,135Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-055425.097/custom-cordapp_1_5_44f97ae2-c6ea-4a79-bff9-d67ae4b92241.jar {}
[WARN ] 2020-04-14T05:54:29,091Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:29,105Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:29,134Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:29,134Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:30,554Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:30,567Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T05:54:30,592Z [Test worker] internal.Verifier. - Error validating transaction 310552B59B4FDC312416297C7D7215E069D20D412A25382FBE3FB585483EC8FB. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one inputs
	at bootcamp.TokenContract.verify(TokenContract.java:17) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T05:54:30,598Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:30,601Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T05:54:30,601Z [Test worker] internal.Verifier. - Error validating transaction 310552B59B4FDC312416297C7D7215E069D20D412A25382FBE3FB585483EC8FB. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one inputs
	at bootcamp.TokenContract.verify(TokenContract.java:17) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneOutputInTheTransaction$2(ContractTests.java:54) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneOutputInTheTransaction(ContractTests.java:49) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T05:54:30,698Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:30,717Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:32,203Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:54:32,209Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T05:55:57,261Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-055556.290/custom-cordapp_1_5_aa2e297d-85a3-4499-86a2-55fbac5b8a94.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T05:55:57,432Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-055556.290/custom-cordapp_1_5_aa2e297d-85a3-4499-86a2-55fbac5b8a94.jar {}
[WARN ] 2020-04-14T05:56:00,572Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:56:00,615Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:56:02,298Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T05:56:02,323Z [Test worker] internal.Verifier. - Error validating transaction B0A7877110926B52DAD5AFEA3871E72B163027DF01C797F1A50AB5293D7E8BCB. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one command
	at bootcamp.TokenContract.verify(TokenContract.java:19) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T05:56:02,333Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T05:56:02,334Z [Test worker] internal.Verifier. - Error validating transaction B0A7877110926B52DAD5AFEA3871E72B163027DF01C797F1A50AB5293D7E8BCB. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one command
	at bootcamp.TokenContract.verify(TokenContract.java:19) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T05:56:02,447Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:56:02,467Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:56:04,200Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T05:56:04,206Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:05:03,260Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060502.202/custom-cordapp_1_5_4f74c117-e1d0-4294-bfc1-09c5dbeffaf0.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:05:03,397Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060502.202/custom-cordapp_1_5_4f74c117-e1d0-4294-bfc1-09c5dbeffaf0.jar {}
[WARN ] 2020-04-14T06:05:06,298Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:05:06,343Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:05:08,174Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:05:08,201Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:06:12,647Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060611.800/custom-cordapp_1_5_0a44c015-abc6-430f-a19e-8ac840711f03.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:06:12,772Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060611.800/custom-cordapp_1_5_0a44c015-abc6-430f-a19e-8ac840711f03.jar {}
[WARN ] 2020-04-14T06:06:15,472Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:15,508Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:17,039Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:06:17,071Z [Test worker] internal.Verifier. - Error validating transaction 17E140274C60B4A40F9F2AA87FD9BC63D6B0BA6936CDE0236945EBA3DA569477. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one command
	at bootcamp.TokenContract.verify(TokenContract.java:21) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:06:17,079Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:06:17,079Z [Test worker] internal.Verifier. - Error validating transaction 17E140274C60B4A40F9F2AA87FD9BC63D6B0BA6936CDE0236945EBA3DA569477. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Transaction must have one command
	at bootcamp.TokenContract.verify(TokenContract.java:21) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresOneCommandInTheTransaction$4(ContractTests.java:74) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresOneCommandInTheTransaction(ContractTests.java:69) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:06:17,159Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:17,180Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:18,484Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:18,489Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:06:49,455Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060648.501/custom-cordapp_1_5_814d6e7b-28fc-4dbb-b1dd-e99dcd482c9c.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:06:49,578Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060648.501/custom-cordapp_1_5_814d6e7b-28fc-4dbb-b1dd-e99dcd482c9c.jar {}
[WARN ] 2020-04-14T06:06:52,165Z [Test worker] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:52,199Z [Test worker] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:53,960Z [Test worker] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:53,965Z [Test worker] internal.Verifier. - State of class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled in TransactionState with bootcamp.TokenContract.  For details see: https://docs.corda.net/api-contract-constraints.html#contract-state-agreement {}
[ERROR] 2020-04-14T06:06:53,966Z [Test worker] internal.Verifier. - Error validating transaction 5118AD20ECD29BC192DA25CA55ADA25ACEF94568EC8FFB98CD145BA8AA9716C8. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Output must be a TokenState
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:06:53,971Z [Test worker] contracts.TransactionState. - State class net.corda.testing.contracts.DummyState belongs to contract net.corda.testing.contracts.DummyContract, but is bundled with contract bootcamp.TokenContract in TransactionState. Annotate DummyState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:06:53,971Z [Test worker] internal.Verifier. - Error validating transaction 5118AD20ECD29BC192DA25CA55ADA25ACEF94568EC8FFB98CD145BA8AA9716C8. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Output must be a TokenState
	at bootcamp.TokenContract.verify(TokenContract.java:26) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToBeATokenState$6(ContractTests.java:93) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToBeATokenState(ContractTests.java:89) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:06:54,044Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:54,064Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:55,163Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:06:55,183Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:07:11,088Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060710.181/custom-cordapp_1_5_57055738-c710-48fe-bee4-dc0bdb07bb55.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:07:11,201Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060710.181/custom-cordapp_1_5_57055738-c710-48fe-bee4-dc0bdb07bb55.jar {}
[WARN ] 2020-04-14T06:07:13,730Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:07:13,767Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:07:15,084Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:07:15,108Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:09:07,306Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060906.464/custom-cordapp_1_5_738a3a2a-d1e9-4f55-bdb2-a2370ec2bf91.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:09:07,409Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060906.464/custom-cordapp_1_5_738a3a2a-d1e9-4f55-bdb2-a2370ec2bf91.jar {}
[WARN ] 2020-04-14T06:09:09,951Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:09:09,987Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:09:12,064Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:09:12,093Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:09:59,936Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060958.887/custom-cordapp_1_5_c411bda1-b1a6-4aec-9ee4-be5969961de6.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:10:00,121Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-060958.887/custom-cordapp_1_5_c411bda1-b1a6-4aec-9ee4-be5969961de6.jar {}
[WARN ] 2020-04-14T06:10:03,055Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:03,113Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:04,819Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:04,852Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:10:16,657Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-061015.766/custom-cordapp_1_5_e82b4899-00d5-4a98-8471-f4875f5d72f6.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:10:16,789Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-061015.766/custom-cordapp_1_5_e82b4899-00d5-4a98-8471-f4875f5d72f6.jar {}
[WARN ] 2020-04-14T06:10:19,542Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:19,590Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:20,982Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:10:21,007Z [Test worker] internal.Verifier. - Error validating transaction D9025DAAE85958A441FB9617C17D99BFAF8FF7E646DD184C67ED513730C5D571. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Command must be Issue command
	at bootcamp.TokenContract.verify(TokenContract.java:28) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:10:21,014Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:10:21,014Z [Test worker] internal.Verifier. - Error validating transaction D9025DAAE85958A441FB9617C17D99BFAF8FF7E646DD184C67ED513730C5D571. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Command must be Issue command
	at bootcamp.TokenContract.verify(TokenContract.java:28) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand$12(ContractTests.java:151) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsCommandToBeAnIssueCommand(ContractTests.java:147) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:10:21,095Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:21,120Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:22,431Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:10:22,436Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:11:07,808Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-061106.835/custom-cordapp_1_5_e2cc4d63-27e1-4ad1-96e1-e66cc2891167.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:11:07,928Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-061106.835/custom-cordapp_1_5_e2cc4d63-27e1-4ad1-96e1-e66cc2891167.jar {}
[WARN ] 2020-04-14T06:11:10,625Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:10,662Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:12,362Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:11:12,385Z [Test worker] internal.Verifier. - Error validating transaction 69CAAC31C2DE513CB705E93481E8D303A3D21911A582DBD875B4E4C45BA5EB13. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Token amount must be positive
	at bootcamp.TokenContract.verify(TokenContract.java:32) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:11:12,391Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:11:12,392Z [Test worker] internal.Verifier. - Error validating transaction 69CAAC31C2DE513CB705E93481E8D303A3D21911A582DBD875B4E4C45BA5EB13. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Token amount must be positive
	at bootcamp.TokenContract.verify(TokenContract.java:32) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$8(ContractTests.java:116) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:112) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:11:12,480Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:12,502Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:13,830Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:11:13,831Z [Test worker] internal.Verifier. - Error validating transaction 7BE9953863B5A8DBCBB41F7EA6FA7B86E8F911D8E906ED475D5A3C0E8FECBAAF. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Token amount must be positive
	at bootcamp.TokenContract.verify(TokenContract.java:32) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:11:13,838Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:11:13,838Z [Test worker] internal.Verifier. - Error validating transaction 7BE9953863B5A8DBCBB41F7EA6FA7B86E8F911D8E906ED475D5A3C0E8FECBAAF. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Token amount must be positive
	at bootcamp.TokenContract.verify(TokenContract.java:32) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount$9(ContractTests.java:124) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheTransactionsOutputToHaveAPositiveAmount(ContractTests.java:120) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:11:13,977Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:14,007Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:15,021Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:15,027Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:15,077Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:15,087Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:15,938Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:11:15,941Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T06:14:24,894Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-061424.042/custom-cordapp_1_5_a44aba93-9986-4b21-8a48-1f8a0d89fdf6.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T06:14:25,024Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/generated-custom-cordapps/20200414-061424.042/custom-cordapp_1_5_a44aba93-9986-4b21-8a48-1f8a0d89fdf6.jar {}
[WARN ] 2020-04-14T06:14:27,563Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:27,598Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:29,250Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:14:29,270Z [Test worker] internal.Verifier. - Error validating transaction 2EDA111AFC64B906E341587F710623E2445C09804365F55F332CE04237142B16. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a required signer
	at bootcamp.TokenContract.verify(TokenContract.java:42) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:14:29,276Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:14:29,276Z [Test worker] internal.Verifier. - Error validating transaction 2EDA111AFC64B906E341587F710623E2445C09804365F55F332CE04237142B16. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a required signer
	at bootcamp.TokenContract.verify(TokenContract.java:42) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$14(ContractTests.java:172) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:168) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:14:29,359Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:29,380Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:30,607Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:14:30,607Z [Test worker] internal.Verifier. - Error validating transaction B7FC3E14BDB5AD825EBBD06E50E2464285C5012A90E04839927C8166185678AE. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a required signer
	at bootcamp.TokenContract.verify(TokenContract.java:42) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.addMissingDependency(TransactionBuilder.kt:185) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:165) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.toWireTransaction$test_utils(TestDSL.kt:131) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:14:30,611Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[ERROR] 2020-04-14T06:14:30,612Z [Test worker] internal.Verifier. - Error validating transaction B7FC3E14BDB5AD825EBBD06E50E2464285C5012A90E04839927C8166185678AE. [errorCode=gtgacr, moreInformationAt=https://errors.corda.net/OS/4.3/gtgacr] {}
java.lang.IllegalArgumentException: Issuer must be a required signer
	at bootcamp.TokenContract.verify(TokenContract.java:42) ~[main/:?]
	at net.corda.core.internal.Verifier.verifyContracts(TransactionVerifierServiceInternal.kt:400) ~[corda-core-4.3.jar:?]
	at net.corda.core.internal.Verifier.verify(TransactionVerifierServiceInternal.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.LedgerTransaction.verify(LedgerTransaction.kt:136) ~[corda-core-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.verifies(TestDSL.kt:175) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.failsWith(LedgerDSLInterpreter.kt:45) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.failsWith(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.failsWith(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.Verifies$DefaultImpls.fails(LedgerDSLInterpreter.kt:75) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSLInterpreter$DefaultImpls.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TestTransactionDSLInterpreter.fails(TestDSL.kt:74) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.dsl.TransactionDSL.fails(TransactionDSLInterpreter.kt) ~[corda-test-utils-4.3.jar:?]
	at bootcamp.ContractTests.lambda$tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction$15(ContractTests.java:180) ~[test/:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt:54) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$transaction$1.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt:39) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils$ledger$2.invoke(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt$withTestSerializationEnvIfNotSet$1.invoke(InternalTestUtils.kt) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.common.internal.CommonSerializationTestHelpersKt.asContextEnv(CommonSerializationTestHelpers.kt:11) ~[corda-test-common-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv(InternalSerializationTestHelpers.kt:33) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalSerializationTestHelpersKt.asTestContextEnv$default(InternalSerializationTestHelpers.kt:31) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.internal.InternalTestUtilsKt.withTestSerializationEnvIfNotSet(InternalTestUtils.kt:231) ~[corda-test-utils-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.ledger(NodeTestUtils.kt:36) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt:53) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction$default(NodeTestUtils.kt:51) ~[corda-node-driver-4.3.jar:?]
	at net.corda.testing.node.NodeTestUtils.transaction(NodeTestUtils.kt) ~[corda-node-driver-4.3.jar:?]
	at bootcamp.ContractTests.tokenContractRequiresTheIssuerToBeARequiredSignerInTheTransaction(ContractTests.java:176) ~[test/:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) ~[junit-4.12.jar:4.12]
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47) ~[junit-4.12.jar:4.12]
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) ~[junit-4.12.jar:4.12]
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) ~[junit-4.12.jar:4.12]
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363) ~[junit-4.12.jar:4.12]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38) ~[?:?]
	at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62) ~[?:?]
	at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32) ~[?:?]
	at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at com.sun.proxy.$Proxy2.processTestClass(Unknown Source) ~[?:?]
	at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118) ~[?:?]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_241]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_241]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_241]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_241]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:175) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:157) ~[?:?]
	at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404) ~[?:?]
	at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55) ~[gradle-tooling-api-5.4.1.jar:5.4.1]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_241]
[WARN ] 2020-04-14T06:14:30,684Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:30,700Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:31,658Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:31,663Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:31,715Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:31,727Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:32,664Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[WARN ] 2020-04-14T06:14:32,669Z [Test worker] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {}
[INFO ] 2020-04-14T07:16:09,354Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T07:16:09,932Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:16:13,609Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:16:17,082Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T07:16:17,110Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:16:17,116Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:16:18,260Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:16:18,320Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T07:16:18,924Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:16:18,938Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:16:18,938Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T07:16:19,165Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:16:19,177Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:16:20,369Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T07:16:20,939Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:16:20,950Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:16:20,987Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:16:20,988Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:16:20,988Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:16:22,630Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:16:22,630Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:16:23,003Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:16:23,077Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:16:23,188Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T07:16:23,585Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:16:23,585Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T07:16:23,646Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:16:23,706Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T07:16:23,717Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:16:23,782Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:16:23,782Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T07:16:23,782Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:16:23,782Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T07:16:23,782Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:16:23,782Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,821Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T07:16:23,907Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,907Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:16:23,941Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,941Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:16:23,941Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,941Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:16:23,941Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,942Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:16:23,957Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,957Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:16:23,957Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,957Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:16:23,960Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:16:23,960Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:16:23,970Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T07:16:27,249Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:16:27,249Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:16:27,261Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T07:16:27,261Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:16:27,263Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:16:27,287Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T07:16:27,288Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:16:27,332Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T07:16:27,742Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-071603.614\nodes\0\cordapps] {}
[INFO ] 2020-04-14T07:16:27,752Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071603.614/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:16:27,796Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071603.614/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:16:29,844Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:16:30,012Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:30,016Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:30,018Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:30,462Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:16:03.550Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:16:41,295Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:41,305Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-071603.614\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:41,305Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:41,423Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:41,591Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:41,606Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:46,756Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:48,372Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:48,375Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:48,385Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:48,385Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:48,570Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:48,642Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:16:48,692Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:16:48,692Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:16:49,252Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:16:49,272Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:16:49,272Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:49,283Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:16:49,703Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:49,863Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:16:49,959Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:50,023Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:50,120Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:16:50,132Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T07:16:50,140Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T07:16:51,375Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:51,473Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:51,477Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:51,477Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:51,477Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:51,494Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-071603.614\nodes\1\cordapps] {}
[INFO ] 2020-04-14T07:16:51,495Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071603.614/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:16:51,495Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071603.614/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T07:16:51,513Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T07:16:51,552Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:16:51,619Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:51,619Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:51,619Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:51,627Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:16:03.550Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:16:52,847Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:52,853Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-071603.614\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:52,853Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:52,882Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:52,891Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:52,891Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,145Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,164Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,166Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,171Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,171Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,290Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:53,303Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:16:53,310Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:16:53,310Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:16:53,571Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:16:53,572Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:16:53,628Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:16:53,628Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,637Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:16:53,654Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,672Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:16:53,677Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,686Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:53,768Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:16:53,783Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,786Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:53,791Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:16:53,817Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,819Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:16:53,841Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,841Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:53,842Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:53,842Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:53,854Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-071603.614\nodes\2\cordapps] {}
[INFO ] 2020-04-14T07:16:53,855Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071603.614/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:16:53,855Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071603.614/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:16:53,953Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:16:54,017Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:54,017Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:54,018Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:16:54,023Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:16:03.550Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:16:55,111Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,118Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-071603.614\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,118Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,158Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,172Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,172Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,510Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,530Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,534Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,536Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,536Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,644Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:16:55,652Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:16:55,652Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:16:55,652Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:16:55,931Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:16:55,934Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:16:55,989Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:16:55,989Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,000Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:16:56,018Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,034Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:16:56,046Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,064Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:56,137Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:16:56,157Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,162Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848609272) {}
[INFO ] 2020-04-14T07:16:56,163Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:16:56,181Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,184Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:16:56,203Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848613628) {}
[INFO ] 2020-04-14T07:16:56,205Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:16:56,223Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,227Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:16:56,242Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,242Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:56,242Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848615989) {}
[INFO ] 2020-04-14T07:16:56,242Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:16:57,486Z [Mock network] corda.flow. - Flow raised an error: null. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
[INFO ] 2020-04-14T07:16:57,495Z [Mock network] statemachine.StaffedFlowHospital. - Flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Invocation, sessionId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=CA50C47942C130E5EA363FD435CAD8932850FB3192D65D7359B2C90B67B781B3), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@665b06c7, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=439c0c8a-d366-4691-a79b-cd9a0583c676) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
[INFO ] 2020-04-14T07:16:57,502Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:16:57,507Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:16:57,550Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] errored, dumping all transitions:

 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.468Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[73a5e8e5-7e64-4e28-a957-8f1620545a83], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Invocation, sessionId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=CA50C47942C130E5EA363FD435CAD8932850FB3192D65D7359B2C90B67B781B3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@595161a1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@595161a1])
    SignalFlowHasStarted(flowId=[73a5e8e5-7e64-4e28-a957-8f1620545a83])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@595161a1]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.513Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4335725452711413293, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.522Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.528Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
[WARN ] 2020-04-14T07:16:57,550Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.3/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:16:57,555Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
[WARN ] 2020-04-14T07:16:57,651Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] errored, dumping all transitions:

 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.468Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[73a5e8e5-7e64-4e28-a957-8f1620545a83], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Invocation, sessionId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=CA50C47942C130E5EA363FD435CAD8932850FB3192D65D7359B2C90B67B781B3), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@595161a1])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@595161a1])
    SignalFlowHasStarted(flowId=[73a5e8e5-7e64-4e28-a957-8f1620545a83])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@595161a1]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.513Z
  Event: Error(exception=java.lang.NullPointerException)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4335725452711413293, exception=java.lang.NullPointerException)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.522Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.528Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] ---
  Timestamp: 2020-04-14T07:16:57.635Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4335725452711413293)], sessions=[], senderUUID=439c0c8a-d366-4691-a79b-cd9a0583c676)
    CreateTransaction
    RemoveCheckpoint(id=[73a5e8e5-7e64-4e28-a957-8f1620545a83])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=73a5e8e5-7e64-4e28-a957-8f1620545a83)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[73a5e8e5-7e64-4e28-a957-8f1620545a83], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4335725452711413293, exception=java.lang.NullPointerException)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Invocation, sessionId=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, timestamp: 2020-04-14T07:16:56.336Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=19F07F9ACA2F0DCE059E0C05615638D220A3169AB2F47485BFFC08ABEE9F7B4F), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=CA50C47942C130E5EA363FD435CAD8932850FB3192D65D7359B2C90B67B781B3), errorState=Errored(errors=[FlowError(errorId=4335725452711413293, exception=java.lang.NullPointerException)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@665b06c7, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=439c0c8a-d366-4691-a79b-cd9a0583c676))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
[WARN ] 2020-04-14T07:16:57,651Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [73a5e8e5-7e64-4e28-a957-8f1620545a83] error [errorCode=2dbb7n, moreInformationAt=https://errors.corda.net/OS/4.3/2dbb7n] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=73a5e8e5-7e64-4e28-a957-8f1620545a83, invocation_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, invocation_timestamp=2020-04-14T07:16:56.336Z, origin=Only For Testing, session_id=fb026cab-2b18-4d14-abc0-78e8d23c8d1c, session_timestamp=2020-04-14T07:16:56.336Z, thread-id=155}
java.lang.NullPointerException: null
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:19:13,598Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T07:19:13,903Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:19:15,958Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:19:17,435Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T07:19:17,455Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:19:17,456Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:19:18,187Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:19:18,223Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T07:19:18,699Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:19:18,711Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:19:18,711Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T07:19:18,900Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:19:18,910Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:19:19,570Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T07:19:19,882Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:19:19,896Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:19:19,947Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:19:19,948Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:19:19,948Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:19:20,706Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:19:20,706Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:19:20,856Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:19:20,883Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:19:20,935Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T07:19:21,128Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:19:21,128Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T07:19:21,152Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:19:21,200Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T07:19:21,200Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:19:21,236Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:19:21,249Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T07:19:21,250Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:19:21,250Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T07:19:21,250Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:19:21,250Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,287Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T07:19:21,324Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,324Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:19:21,346Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T07:19:23,258Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:19:23,271Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:19:23,282Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T07:19:23,283Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:19:23,286Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:19:23,308Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T07:19:23,308Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:19:23,336Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T07:19:23,528Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-071907.790\nodes\0\cordapps] {}
[INFO ] 2020-04-14T07:19:23,534Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071907.790/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:19:23,560Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071907.790/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:19:24,559Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:19:24,785Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:24,789Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:24,791Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:24,974Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:19:07.709Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:19:29,657Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:29,669Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-071907.790\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:29,669Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:29,702Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:29,818Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:29,826Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:31,984Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:32,648Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:32,649Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:32,655Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:32,655Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:32,742Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:32,792Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:19:32,818Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:19:32,818Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:19:33,048Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:19:33,058Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:19:33,058Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:33,065Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:19:33,244Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:33,300Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:19:33,323Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:33,355Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:33,403Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:19:33,411Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T07:19:33,416Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T07:19:33,925Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:33,947Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:33,949Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:33,950Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:33,950Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:33,958Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-071907.790\nodes\1\cordapps] {}
[INFO ] 2020-04-14T07:19:33,959Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071907.790/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:19:33,959Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071907.790/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T07:19:33,969Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T07:19:33,997Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:19:34,027Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:34,027Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:34,027Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:34,031Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:19:07.709Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:19:34,757Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:34,758Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-071907.790\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:34,758Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:34,812Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:34,815Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:34,815Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,026Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,041Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,044Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,045Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,045Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,118Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:35,128Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:19:35,132Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:19:35,132Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:19:35,283Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:19:35,286Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:19:35,313Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:19:35,313Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,315Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:19:35,322Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,331Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:19:35,336Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,341Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:35,378Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:19:35,387Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,391Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:35,393Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:19:35,403Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,404Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:19:35,413Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,413Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:35,413Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:35,413Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:35,421Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-071907.790\nodes\2\cordapps] {}
[INFO ] 2020-04-14T07:19:35,422Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071907.790/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:19:35,422Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-071907.790/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:19:35,500Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:19:35,562Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:35,562Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:35,563Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:19:35,571Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:19:07.709Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:19:36,255Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,258Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-071907.790\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,258Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,275Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,279Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,279Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,408Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,417Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,418Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,421Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,421Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,470Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:19:36,477Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:19:36,478Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:19:36,478Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:19:36,575Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:19:36,577Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:19:36,597Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:19:36,597Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,598Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:19:36,604Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,614Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:19:36,617Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,621Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:36,652Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:19:36,660Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,663Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848773058) {}
[INFO ] 2020-04-14T07:19:36,666Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:19:36,676Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,677Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:19:36,685Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848775313) {}
[INFO ] 2020-04-14T07:19:36,686Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:19:36,695Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,696Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:19:36,703Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,703Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:36,704Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848776597) {}
[INFO ] 2020-04-14T07:19:36,704Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:19:37,334Z [Mock network] corda.flow. - Flow raised an error: A transaction must contain at least one input or output state. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
[INFO ] 2020-04-14T07:19:37,340Z [Mock network] statemachine.StaffedFlowHospital. - Flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Invocation, sessionId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B15F14AFB4CA4950D85707FEAA4F2E2057C30FE62B2BFBF4D34DA37BBE47ECB8), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@42bb2e43, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=bcc43911-4bcb-4b8e-b1be-cef613176ff3) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
[INFO ] 2020-04-14T07:19:37,342Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:19:37,343Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:19:37,364Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] errored, dumping all transitions:

 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.303Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a6bde8cf-8a01-47c0-8aad-5dbba123dd6d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Invocation, sessionId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B15F14AFB4CA4950D85707FEAA4F2E2057C30FE62B2BFBF4D34DA37BBE47ECB8), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7bef27c9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7bef27c9])
    SignalFlowHasStarted(flowId=[a6bde8cf-8a01-47c0-8aad-5dbba123dd6d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7bef27c9]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.347Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1072636099814997235, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.351Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.356Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
[WARN ] 2020-04-14T07:19:37,364Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:19:37,368Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
[WARN ] 2020-04-14T07:19:37,412Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] errored, dumping all transitions:

 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.303Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a6bde8cf-8a01-47c0-8aad-5dbba123dd6d], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Invocation, sessionId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B15F14AFB4CA4950D85707FEAA4F2E2057C30FE62B2BFBF4D34DA37BBE47ECB8), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7bef27c9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7bef27c9])
    SignalFlowHasStarted(flowId=[a6bde8cf-8a01-47c0-8aad-5dbba123dd6d])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7bef27c9]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.347Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=1072636099814997235, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.351Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.356Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] ---
  Timestamp: 2020-04-14T07:19:37.408Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=1072636099814997235)], sessions=[], senderUUID=bcc43911-4bcb-4b8e-b1be-cef613176ff3)
    CreateTransaction
    RemoveCheckpoint(id=[a6bde8cf-8a01-47c0-8aad-5dbba123dd6d])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[a6bde8cf-8a01-47c0-8aad-5dbba123dd6d], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=1072636099814997235, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Invocation, sessionId=072f40a8-7621-4123-8f49-40eb3d5c4726, timestamp: 2020-04-14T07:19:36.742Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=B15F14AFB4CA4950D85707FEAA4F2E2057C30FE62B2BFBF4D34DA37BBE47ECB8), errorState=Errored(errors=[FlowError(errorId=1072636099814997235, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@42bb2e43, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=bcc43911-4bcb-4b8e-b1be-cef613176ff3))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
[WARN ] 2020-04-14T07:19:37,412Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a6bde8cf-8a01-47c0-8aad-5dbba123dd6d] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=a6bde8cf-8a01-47c0-8aad-5dbba123dd6d, invocation_id=072f40a8-7621-4123-8f49-40eb3d5c4726, invocation_timestamp=2020-04-14T07:19:36.742Z, origin=Only For Testing, session_id=072f40a8-7621-4123-8f49-40eb3d5c4726, session_timestamp=2020-04-14T07:19:36.742Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:21:36,126Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T07:21:36,471Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:21:38,472Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:21:39,911Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T07:21:39,938Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:21:39,940Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:21:40,714Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:21:40,759Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T07:21:41,246Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:21:41,258Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:21:41,258Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T07:21:41,453Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:21:41,466Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:21:42,258Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T07:21:42,470Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:21:42,482Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:21:42,507Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:21:42,507Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:21:42,507Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:21:43,243Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:21:43,243Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:21:43,385Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:21:43,423Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:21:43,470Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T07:21:43,614Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:21:43,614Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T07:21:43,649Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:21:43,697Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T07:21:43,697Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:21:43,721Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:21:43,721Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T07:21:43,721Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:21:43,721Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T07:21:43,721Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:21:43,721Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,755Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T07:21:43,790Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,790Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,802Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:21:43,821Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:21:43,835Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:21:43,849Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T07:21:43,862Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:21:43,862Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:21:43,862Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T07:21:43,862Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:21:43,873Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:21:43,884Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T07:21:43,901Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:21:43,914Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T07:21:44,095Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072130.220\nodes\0\cordapps] {}
[INFO ] 2020-04-14T07:21:44,100Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072130.220/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:21:44,126Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072130.220/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:21:45,017Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:21:45,134Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:45,135Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:45,136Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:45,288Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:21:30.115Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:21:49,726Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:49,738Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072130.220\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:49,738Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:49,800Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:49,904Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:49,911Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,081Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,746Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,748Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,753Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,753Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,833Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:52,879Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:21:52,903Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:21:52,903Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:21:53,128Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:21:53,138Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:21:53,139Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:53,144Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:21:53,335Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:53,389Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:21:53,409Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:53,441Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:53,484Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:21:53,491Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T07:21:53,493Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T07:21:53,997Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:54,018Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:54,020Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:54,021Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:54,021Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:54,032Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072130.220\nodes\1\cordapps] {}
[INFO ] 2020-04-14T07:21:54,033Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072130.220/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:21:54,033Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072130.220/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T07:21:54,043Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T07:21:54,111Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:21:54,139Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:54,140Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:54,140Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:54,143Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:21:30.115Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:21:54,806Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:54,809Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072130.220\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:54,809Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:54,829Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:54,833Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:54,833Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,000Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,012Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,012Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,016Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,016Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,088Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:55,096Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:21:55,100Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:21:55,100Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:21:55,242Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:21:55,248Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:21:55,288Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:21:55,288Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,291Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:21:55,301Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,312Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:21:55,318Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,322Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:55,385Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:21:55,396Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,403Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:55,406Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:21:55,427Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,428Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:21:55,443Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,443Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:55,444Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:55,444Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:55,453Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072130.220\nodes\2\cordapps] {}
[INFO ] 2020-04-14T07:21:55,453Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072130.220/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:21:55,453Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072130.220/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:21:55,529Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:21:55,561Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:55,561Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:55,561Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:21:55,566Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:21:30.115Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:21:56,130Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,136Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072130.220\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,136Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,188Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,189Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,189Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,325Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,335Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,336Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,338Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,338Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,390Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:21:56,401Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:21:56,402Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:21:56,402Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:21:56,500Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:21:56,503Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:21:56,522Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:21:56,522Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,525Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:21:56,531Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,538Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:21:56,542Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,545Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:56,581Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:21:56,592Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,595Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586848913138) {}
[INFO ] 2020-04-14T07:21:56,596Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:21:56,607Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,608Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:21:56,618Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586848915288) {}
[INFO ] 2020-04-14T07:21:56,619Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:21:56,627Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,629Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:21:56,640Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,640Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:56,641Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586848916522) {}
[INFO ] 2020-04-14T07:21:56,641Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:21:57,207Z [Mock network] corda.flow. - Flow raised an error: A transaction must contain at least one input or output state. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
[INFO ] 2020-04-14T07:21:57,213Z [Mock network] statemachine.StaffedFlowHospital. - Flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Invocation, sessionId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D9E1C7531BD667687389ED6224CD4A2CB77054963FCC01A61169711424CA04B6), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1cc8d979, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=c6d2837e-5428-43a1-8914-a3270fd05b06) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
[INFO ] 2020-04-14T07:21:57,216Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:21:57,216Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:21:57,241Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] errored, dumping all transitions:

 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.176Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Invocation, sessionId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D9E1C7531BD667687389ED6224CD4A2CB77054963FCC01A61169711424CA04B6), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@94b4d36])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@94b4d36])
    SignalFlowHasStarted(flowId=[b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@94b4d36]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.220Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-603792090405758957, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.223Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.227Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
[WARN ] 2020-04-14T07:21:57,241Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:21:57,245Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
[WARN ] 2020-04-14T07:21:57,296Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] errored, dumping all transitions:

 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.176Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Invocation, sessionId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D9E1C7531BD667687389ED6224CD4A2CB77054963FCC01A61169711424CA04B6), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@94b4d36])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@94b4d36])
    SignalFlowHasStarted(flowId=[b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@94b4d36]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.220Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-603792090405758957, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.223Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.227Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] ---
  Timestamp: 2020-04-14T07:21:57.290Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-603792090405758957)], sessions=[], senderUUID=c6d2837e-5428-43a1-8914-a3270fd05b06)
    CreateTransaction
    RemoveCheckpoint(id=[b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-603792090405758957, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Invocation, sessionId=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, timestamp: 2020-04-14T07:21:56.693Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=B92BD7EAB1C5D96BF496DC7650C9172B9CBBCDD87619749971E25EFA773BF731), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=D9E1C7531BD667687389ED6224CD4A2CB77054963FCC01A61169711424CA04B6), errorState=Errored(errors=[FlowError(errorId=-603792090405758957, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1cc8d979, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=c6d2837e-5428-43a1-8914-a3270fd05b06))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
[WARN ] 2020-04-14T07:21:57,296Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=b5e35b8f-6d2e-43b4-a3e7-11e0a005eae0, invocation_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, invocation_timestamp=2020-04-14T07:21:56.693Z, origin=Only For Testing, session_id=eddf5bbd-bfc0-40fd-9c0d-dc8b17adb9d5, session_timestamp=2020-04-14T07:21:56.693Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:55) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:26:20,579Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T07:26:20,901Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:26:22,790Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:26:24,211Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T07:26:24,231Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:26:24,233Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:26:24,957Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:26:24,993Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T07:26:25,433Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:26:25,445Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:26:25,445Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T07:26:25,627Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:26:25,639Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:26:26,337Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T07:26:26,558Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:26:26,570Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:26:26,595Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:26:26,596Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:26:26,596Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:26:27,323Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:26:27,336Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:26:27,466Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:26:27,504Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:26:27,549Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T07:26:27,699Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:26:27,699Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T07:26:27,734Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:26:27,768Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T07:26:27,768Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:26:27,804Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:26:27,816Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T07:26:27,816Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:26:27,816Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T07:26:27,816Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:26:27,816Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,847Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T07:26:27,894Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,894Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:26:27,894Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,894Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:26:27,894Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,894Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:26:27,936Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,937Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:26:27,937Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,937Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:26:27,938Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,938Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:26:27,938Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:26:27,938Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:26:27,938Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T07:26:29,873Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:26:29,886Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:26:29,886Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T07:26:29,886Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:26:29,896Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:26:29,921Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T07:26:29,921Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:26:29,956Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T07:26:30,117Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072614.903\nodes\0\cordapps] {}
[INFO ] 2020-04-14T07:26:30,123Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072614.903/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:26:30,155Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072614.903/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:26:31,050Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:26:31,118Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:31,122Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:31,123Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:31,257Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:26:14.832Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:26:35,878Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:35,883Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072614.903\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:35,883Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:35,920Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:36,034Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:36,042Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,160Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,798Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,801Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,806Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,806Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,880Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:38,932Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:26:38,947Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:26:38,947Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:26:39,194Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:26:39,205Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:26:39,205Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:39,212Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:26:39,398Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:39,462Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:26:39,482Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:39,512Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:39,549Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:26:39,554Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T07:26:39,556Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T07:26:40,046Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:40,080Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:40,082Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:40,082Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:40,083Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:40,137Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072614.903\nodes\1\cordapps] {}
[INFO ] 2020-04-14T07:26:40,138Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072614.903/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:26:40,138Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072614.903/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T07:26:40,157Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T07:26:40,188Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:26:40,220Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:40,220Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:40,220Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:40,224Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:26:14.832Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:26:40,872Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:40,883Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072614.903\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:40,883Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:40,906Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:40,914Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:40,914Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,145Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,157Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,157Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,162Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,162Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,224Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:41,233Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:26:41,236Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:26:41,236Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:26:41,363Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:26:41,365Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:26:41,393Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:26:41,393Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,395Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:26:41,404Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,457Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:26:41,461Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,466Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:41,505Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:26:41,516Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,521Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:41,524Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:26:41,535Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,537Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:26:41,548Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,548Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:41,549Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:41,549Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:41,561Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072614.903\nodes\2\cordapps] {}
[INFO ] 2020-04-14T07:26:41,561Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072614.903/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:26:41,561Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072614.903/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:26:41,612Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:26:41,641Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:41,641Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:41,641Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:26:41,645Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:26:14.832Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:26:42,373Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,379Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072614.903\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,379Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,402Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,410Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,410Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,537Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,547Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,549Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,551Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,551Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,606Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:26:42,615Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:26:42,616Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:26:42,616Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:26:42,726Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:26:42,730Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:26:42,751Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:26:42,751Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,754Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:26:42,760Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,769Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:26:42,773Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,779Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:42,814Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:26:42,824Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,826Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849199205) {}
[INFO ] 2020-04-14T07:26:42,828Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:26:42,837Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,839Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:26:42,849Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849201393) {}
[INFO ] 2020-04-14T07:26:42,851Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:26:42,860Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,862Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:26:42,871Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,871Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:42,871Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849202751) {}
[INFO ] 2020-04-14T07:26:42,872Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:26:43,581Z [Mock network] corda.flow. - Flow raised an error: A transaction must contain at least one input or output state. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
[INFO ] 2020-04-14T07:26:43,583Z [Mock network] statemachine.StaffedFlowHospital. - Flow [5cc15e25-ea52-4c81-b86b-047061067f86] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Invocation, sessionId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6F446A6459973405C4817E6824FE29016B2F7A30077DDED6CC6BC2E8C38C8629), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@3135b5d8, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=d363032a-a321-4002-affa-869ebe7519e9) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
[INFO ] 2020-04-14T07:26:43,588Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:26:43,588Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:26:43,608Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5cc15e25-ea52-4c81-b86b-047061067f86] errored, dumping all transitions:

 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.550Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5cc15e25-ea52-4c81-b86b-047061067f86], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Invocation, sessionId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6F446A6459973405C4817E6824FE29016B2F7A30077DDED6CC6BC2E8C38C8629), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40b7121])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40b7121])
    SignalFlowHasStarted(flowId=[5cc15e25-ea52-4c81-b86b-047061067f86])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40b7121]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.593Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4614208874583411021, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.597Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.600Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
[WARN ] 2020-04-14T07:26:43,608Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5cc15e25-ea52-4c81-b86b-047061067f86] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:26:43,612Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
[WARN ] 2020-04-14T07:26:43,650Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5cc15e25-ea52-4c81-b86b-047061067f86] errored, dumping all transitions:

 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.550Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[5cc15e25-ea52-4c81-b86b-047061067f86], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Invocation, sessionId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6F446A6459973405C4817E6824FE29016B2F7A30077DDED6CC6BC2E8C38C8629), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40b7121])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40b7121])
    SignalFlowHasStarted(flowId=[5cc15e25-ea52-4c81-b86b-047061067f86])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@40b7121]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.593Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-4614208874583411021, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.597Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.600Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [5cc15e25-ea52-4c81-b86b-047061067f86] ---
  Timestamp: 2020-04-14T07:26:43.646Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-4614208874583411021)], sessions=[], senderUUID=d363032a-a321-4002-affa-869ebe7519e9)
    CreateTransaction
    RemoveCheckpoint(id=[5cc15e25-ea52-4c81-b86b-047061067f86])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=5cc15e25-ea52-4c81-b86b-047061067f86)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[5cc15e25-ea52-4c81-b86b-047061067f86], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-4614208874583411021, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Invocation, sessionId=684a1775-a56e-4a3e-82c2-8b7362fe162b, timestamp: 2020-04-14T07:26:42.912Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=6F446A6459973405C4817E6824FE29016B2F7A30077DDED6CC6BC2E8C38C8629), errorState=Errored(errors=[FlowError(errorId=-4614208874583411021, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@3135b5d8, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=d363032a-a321-4002-affa-869ebe7519e9))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
[WARN ] 2020-04-14T07:26:43,650Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [5cc15e25-ea52-4c81-b86b-047061067f86] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=5cc15e25-ea52-4c81-b86b-047061067f86, invocation_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, invocation_timestamp=2020-04-14T07:26:42.912Z, origin=Only For Testing, session_id=684a1775-a56e-4a3e-82c2-8b7362fe162b, session_timestamp=2020-04-14T07:26:42.912Z, thread-id=155}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:29:33,856Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T07:29:34,200Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:29:36,273Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:29:38,158Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T07:29:38,183Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T07:29:38,184Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:29:39,236Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:29:39,273Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T07:29:39,893Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:29:39,906Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:29:39,919Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T07:29:40,175Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:29:40,187Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:29:41,374Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T07:29:41,877Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:29:41,902Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:29:41,955Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:29:41,968Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T07:29:41,968Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T07:29:43,443Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T07:29:43,443Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:29:43,718Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:29:43,779Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:29:43,879Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T07:29:44,130Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:29:44,130Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T07:29:44,178Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:29:44,245Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T07:29:44,245Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T07:29:44,317Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:29:44,317Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T07:29:44,346Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:29:44,346Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T07:29:44,346Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:29:44,346Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,387Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T07:29:44,474Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,474Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:29:44,488Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,488Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:29:44,488Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,488Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:29:44,488Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,488Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:29:44,501Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,501Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:29:44,502Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,502Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T07:29:44,502Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T07:29:44,516Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:29:44,517Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T07:29:44,558Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T07:29:44,568Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:29:44,569Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T07:29:44,569Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T07:29:44,570Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:29:44,592Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T07:29:44,592Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T07:29:44,624Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T07:29:45,075Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072927.784\nodes\0\cordapps] {}
[INFO ] 2020-04-14T07:29:45,091Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072927.784/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:29:45,152Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072927.784/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:29:47,307Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:29:47,513Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:29:47,514Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:29:47,515Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:29:47,949Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:29:27.707Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:29:56,907Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:29:56,913Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072927.784\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:29:56,913Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:29:56,961Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:29:57,086Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:29:57,094Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:29:59,373Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:00,291Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:00,292Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:00,301Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:00,301Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:00,465Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:00,546Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:30:00,580Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:30:00,580Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:30:01,032Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T07:30:01,048Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:30:01,048Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:01,059Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:30:01,481Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:01,630Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:30:01,706Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:01,761Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:01,821Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:30:01,834Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T07:30:01,841Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T07:30:03,072Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:03,127Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:03,133Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:03,134Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:03,134Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:03,197Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072927.784\nodes\1\cordapps] {}
[INFO ] 2020-04-14T07:30:03,199Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072927.784/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:30:03,199Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072927.784/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T07:30:03,217Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T07:30:03,260Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:30:03,343Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:30:03,344Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:30:03,344Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:30:03,353Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:29:27.707Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:30:04,553Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,557Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072927.784\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,557Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,595Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,604Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,604Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,901Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,921Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,923Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,928Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:04,928Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:05,049Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:05,066Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:30:05,076Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:30:05,076Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:30:05,335Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:30:05,339Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:30:05,385Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:30:05,385Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,392Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:30:05,409Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,430Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:30:05,441Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,455Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:05,586Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:30:05,612Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,618Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:05,621Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:30:05,648Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,653Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:30:05,677Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,677Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:05,677Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:05,677Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:05,723Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-072927.784\nodes\2\cordapps] {}
[INFO ] 2020-04-14T07:30:05,724Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072927.784/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T07:30:05,724Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-072927.784/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T07:30:05,785Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T07:30:05,855Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:30:05,855Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T07:30:05,855Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T07:30:05,862Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T07:29:27.707Z
      epoch=1
  } {}
[INFO ] 2020-04-14T07:30:06,974Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:06,979Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-072927.784\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:06,979Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,008Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,015Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,015Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,236Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,251Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,253Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,255Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,255Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,346Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T07:30:07,363Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T07:30:07,367Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:30:07,367Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:30:07,592Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T07:30:07,594Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T07:30:07,630Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T07:30:07,630Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,638Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:30:07,656Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,741Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T07:30:07,755Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,776Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:07,860Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T07:30:07,874Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,877Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586849401048) {}
[INFO ] 2020-04-14T07:30:07,880Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T07:30:07,895Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,902Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:30:07,920Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586849405385) {}
[INFO ] 2020-04-14T07:30:07,921Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T07:30:07,942Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,945Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T07:30:07,963Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,963Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:07,964Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586849407630) {}
[INFO ] 2020-04-14T07:30:07,964Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T07:30:09,303Z [Mock network] corda.flow. - Flow raised an error: A transaction must contain at least one input or output state. Sending it to flow hospital to be triaged. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
[INFO ] 2020-04-14T07:30:09,316Z [Mock network] statemachine.StaffedFlowHospital. - Flow [739a5794-31bb-4f59-8f3c-623c556da645] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Invocation, sessionId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DE9173F60FCA10441B3913BE44B8FFB18A5B5AE5C4DD704E94628027672CF99D), errorState=Clean, numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1fa87067, pendingDeduplicationHandlers=[], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=fe4fb35d-a1d9-4cd9-86cd-1ea1f4268c4b) {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
[INFO ] 2020-04-14T07:30:09,323Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T07:30:09,329Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:30:09,382Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [739a5794-31bb-4f59-8f3c-623c556da645] errored, dumping all transitions:

 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.240Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[739a5794-31bb-4f59-8f3c-623c556da645], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Invocation, sessionId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DE9173F60FCA10441B3913BE44B8FFB18A5B5AE5C4DD704E94628027672CF99D), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7100957b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7100957b])
    SignalFlowHasStarted(flowId=[739a5794-31bb-4f59-8f3c-623c556da645])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7100957b]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.334Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=904762150415927264, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.346Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.356Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
[WARN ] 2020-04-14T07:30:09,383Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [739a5794-31bb-4f59-8f3c-623c556da645] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T07:30:09,393Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
[WARN ] 2020-04-14T07:30:09,493Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [739a5794-31bb-4f59-8f3c-623c556da645] errored, dumping all transitions:

 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.240Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[739a5794-31bb-4f59-8f3c-623c556da645], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Invocation, sessionId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DE9173F60FCA10441B3913BE44B8FFB18A5B5AE5C4DD704E94628027672CF99D), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7100957b])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7100957b])
    SignalFlowHasStarted(flowId=[739a5794-31bb-4f59-8f3c-623c556da645])
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.node.internal.FlowStarterImpl$startFlow$startFlowEvent$1@7100957b]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.334Z
  Event: Error(exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=904762150415927264, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.346Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.356Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [739a5794-31bb-4f59-8f3c-623c556da645] ---
  Timestamp: 2020-04-14T07:30:09.479Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=904762150415927264)], sessions=[], senderUUID=fe4fb35d-a1d9-4cd9-86cd-1ea1f4268c4b)
    CreateTransaction
    RemoveCheckpoint(id=[739a5794-31bb-4f59-8f3c-623c556da645])
    PersistDeduplicationFacts(deduplicationHandlers=[])
    ReleaseSoftLocks(uuid=739a5794-31bb-4f59-8f3c-623c556da645)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    RemoveSessionBindings(sessionIds=[])
    RemoveFlow(flowId=[739a5794-31bb-4f59-8f3c-623c556da645], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=904762150415927264, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=RPC(actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB)), trace=Trace(invocationId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Invocation, sessionId=73be9f8f-2906-4ce2-af0a-8b5cd72649da, timestamp: 2020-04-14T07:30:08.047Z, entityType: Session), actor=Actor(id=Id(value=Only For Testing), serviceId=AuthServiceId(value=TEST), owningLegalIdentity=O=Mock Company 1, L=London, C=GB), externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 1, L=London, C=GB, sessions={}, subFlowStack=[Initiating(flowClass=class bootcamp.TokenIssueFlowInitiator, classToInitiateWith=class bootcamp.TokenIssueFlowInitiator, flowInfo=FlowInfo(flowVersion=1, appName=<unknown>), subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=BD21D2FD349C142D0BAA0622BDE72B23B83811C1E3E8D0AF36964C938153F007), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Explicit, frozenFlowLogic=DE9173F60FCA10441B3913BE44B8FFB18A5B5AE5C4DD704E94628027672CF99D), errorState=Errored(errors=[FlowError(errorId=904762150415927264, exception=java.lang.IllegalStateException: A transaction must contain at least one input or output state)], propagatedIndex=1, propagating=true), numberOfSuspends=0), flowLogic=bootcamp.TokenIssueFlowInitiator@1fa87067, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=fe4fb35d-a1d9-4cd9-86cd-1ea1f4268c4b))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
checkpoint.errorState.propagatedIndex: 
    0
    1
 {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
[WARN ] 2020-04-14T07:30:09,493Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [739a5794-31bb-4f59-8f3c-623c556da645] error [errorCode=9gf8w0, moreInformationAt=https://errors.corda.net/OS/4.3/9gf8w0] {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=739a5794-31bb-4f59-8f3c-623c556da645, invocation_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, invocation_timestamp=2020-04-14T07:30:08.047Z, origin=Only For Testing, session_id=73be9f8f-2906-4ce2-af0a-8b5cd72649da, session_timestamp=2020-04-14T07:30:08.047Z, thread-id=156}
java.lang.IllegalStateException: A transaction must contain at least one input or output state
	at net.corda.core.transactions.WireTransaction.<init>(WireTransaction.kt:72) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:147) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder$toWireTransactionWithContext$wireTx$1.invoke(TransactionBuilder.kt:45) ~[corda-core-4.3.jar:?]
	at net.corda.core.serialization.SerializationFactory.withCurrentContext(SerializationAPI.kt:71) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core(TransactionBuilder.kt:146) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransactionWithContext$core$default(TransactionBuilder.kt:133) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toWireTransaction(TransactionBuilder.kt:130) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.toLedgerTransaction(TransactionBuilder.kt:551) ~[corda-core-4.3.jar:?]
	at net.corda.core.transactions.TransactionBuilder.verify(TransactionBuilder.kt:559) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:56) ~[main/:?]
	at bootcamp.TokenIssueFlowInitiator.call(TokenIssueFlowInitiator.java:12) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:26:01,658Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:26:01,927Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:03,612Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T08:26:04,976Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:26:04,995Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T08:26:04,998Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:05,689Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:05,713Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:26:06,171Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:06,171Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:26:06,171Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:26:06,351Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:26:06,363Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:07,054Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:26:07,262Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:07,262Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:26:07,299Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:07,299Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:26:07,300Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:08,120Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:26:08,120Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:08,272Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:08,297Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:08,343Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:26:08,490Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:08,490Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:26:08,514Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:08,562Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:26:08,562Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:08,589Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:08,589Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:26:08,602Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:08,602Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:26:08,602Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:08,602Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,628Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:26:08,667Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,667Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:08,680Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:08,704Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:08,706Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:26:10,618Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:10,630Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:10,630Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:26:10,630Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:10,632Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:10,642Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:26:10,642Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:10,696Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:26:10,873Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082556.277\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:26:10,877Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082556.277/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:26:10,896Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082556.277/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:26:11,753Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:26:11,828Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:11,829Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:11,830Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:11,998Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:25:56.212Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:26:16,603Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:16,607Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082556.277\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:16,607Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:16,650Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:16,793Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:16,808Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:18,960Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:19,629Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:19,632Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:19,637Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:19,637Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:19,718Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:19,768Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:26:19,795Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:26:19,795Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:26:20,053Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:26:20,061Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:26:20,061Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:20,068Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:26:20,227Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:20,300Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:26:20,327Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:20,366Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:20,407Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:26:20,413Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:26:20,416Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:26:20,925Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:20,948Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:20,949Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:20,950Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:20,950Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:20,958Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082556.277\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:26:20,959Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082556.277/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:26:20,959Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082556.277/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:26:20,968Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:26:21,033Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:26:21,105Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:21,105Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:21,105Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:21,114Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:25:56.212Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:26:21,823Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:21,824Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082556.277\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:21,824Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:21,850Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:21,854Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:21,854Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,039Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,061Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,065Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,068Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,068Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,147Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:22,153Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:26:22,157Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:26:22,157Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:26:22,319Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:26:22,320Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:26:22,345Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:26:22,345Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,348Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:26:22,356Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,366Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:26:22,370Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,375Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:22,414Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:26:22,423Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,427Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:22,429Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:26:22,441Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,443Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:26:22,452Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,452Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:22,453Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:22,453Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:22,460Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082556.277\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:26:22,460Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082556.277/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:26:22,460Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082556.277/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:26:22,488Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:26:22,512Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:22,512Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:22,512Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:22,515Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:25:56.212Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:26:23,185Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,191Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082556.277\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,191Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,225Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,228Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,228Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,379Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,390Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,392Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,395Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,395Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,444Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:23,449Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:26:23,451Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:26:23,451Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:26:23,561Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:26:23,562Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:26:23,587Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:26:23,587Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,588Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:26:23,595Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,602Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:26:23,605Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,609Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:23,641Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:26:23,649Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,652Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852780061) {}
[INFO ] 2020-04-14T08:26:23,653Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:26:23,661Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,662Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:26:23,670Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852782345) {}
[INFO ] 2020-04-14T08:26:23,671Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:26:23,678Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,679Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:26:23,687Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,687Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:26:23,687Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852783587) {}
[INFO ] 2020-04-14T08:26:23,687Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:26:24,242Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:24,263Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:24,263Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:24,266Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:25,570Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:25,593Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:25,610Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:25,618Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:25,706Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154}
[WARN ] 2020-04-14T08:26:25,722Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:25,728Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:25,728Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:25,836Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,010Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,051Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[WARN ] 2020-04-14T08:26:26,055Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,080Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,080Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=46277239-6831-47e3-a2dc-77ffa5411f2a, invocation_id=0687af9b-024e-4e82-811a-acf7fb18becb, invocation_timestamp=2020-04-14T08:26:23.727Z, origin=Only For Testing, session_id=0687af9b-024e-4e82-811a-acf7fb18becb, session_timestamp=2020-04-14T08:26:23.727Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,112Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,117Z [Mock network] statemachine.StaffedFlowHospital. - Flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1c8932c1, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf) {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[INFO ] 2020-04-14T08:26:26,119Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:26:26,120Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:26:26,150Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] errored, dumping all transitions:

 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:25.981Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5A8674761CD1050D235D1719B0A6361F52F6728A0951E117EC90FDCC4AC23805), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6a51392a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6a51392a])
    SignalFlowHasStarted(flowId=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3508725382815657199), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5844883296483956194), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3508725382815657199-5243324012350408543-0-0), senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5844883296483956194): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6a51392a]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:25.985Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:25.988Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.003Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), maySkipCheckpoint=false, fiber=1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E, )
  Actions: 
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5A8674761CD1050D235D1719B0A6361F52F6728A0951E117EC90FDCC4AC23805)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.006Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5844883296483956194).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.018Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.024Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.027Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.029Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.029Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.045Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E, )
  Actions: 
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E
    42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.051Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3508725382815657199), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3508725382815657199-5243324012350408543-2-0), senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.051Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.059Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.063Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), maySkipCheckpoint=false, fiber=DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768, )
  Actions: 
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))])
checkpoint.flowState.frozenFiber.hash: 
    42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E
    DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.066Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.110Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5844883296483956194), payload=net.corda.node.services.statemachine.EndSessionMessage@3e97d09c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5844883296483956194).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=3508725382815657199))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.110Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.112Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.120Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2842382541524910244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.127Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.127Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[WARN ] 2020-04-14T08:26:26,150Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:26:26,156Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[WARN ] 2020-04-14T08:26:26,190Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] errored, dumping all transitions:

 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:25.981Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=5A8674761CD1050D235D1719B0A6361F52F6728A0951E117EC90FDCC4AC23805), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6a51392a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6a51392a])
    SignalFlowHasStarted(flowId=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3508725382815657199), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=5844883296483956194), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3508725382815657199-5243324012350408543-0-0), senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5844883296483956194): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6a51392a]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:25.985Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:25.988Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.003Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), maySkipCheckpoint=false, fiber=1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E, )
  Actions: 
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=5A8674761CD1050D235D1719B0A6361F52F6728A0951E117EC90FDCC4AC23805)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.006Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5844883296483956194).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.018Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.024Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.027Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.029Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.029Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.045Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E, )
  Actions: 
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    1DC7427D48149579F1EB700DA77054993D393E87C8B459D2088973B5159A782E
    42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.051Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=3508725382815657199), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-3508725382815657199-5243324012350408543-2-0), senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.051Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.059Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.063Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), maySkipCheckpoint=false, fiber=DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768, )
  Actions: 
    PersistCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=3508725382815657199)), errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))])
checkpoint.flowState.frozenFiber.hash: 
    42F9DF9B7BC170599C045E0FC07F9A0A3231868D0DC940CC9F2C5FE06D2EE91E
    DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.066Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.110Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5844883296483956194), payload=net.corda.node.services.statemachine.EndSessionMessage@3e97d09c), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=5844883296483956194).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=3508725382815657199))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.110Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.112Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.120Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=2842382541524910244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.127Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.127Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] ---
  Timestamp: 2020-04-14T08:26:26.177Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=2842382541524910244)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)], senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf)
    CreateTransaction
    RemoveCheckpoint(id=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c])
    ReleaseSoftLocks(uuid=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=5844883296483956194)])
    RemoveFlow(flowId=[d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=2842382541524910244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Invocation, sessionId=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, timestamp: 2020-04-14T08:26:25.957Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=5844883296483956194)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-3508725382815657199-5243324012350408543)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=5844883296483956194))]), frozenFiber=DDB04BCC99D176473390DB770DD0B47BB5758FF2E41BFD745AF3DF8DC1DD0768), errorState=Errored(errors=[FlowError(errorId=2842382541524910244, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@1c8932c1, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=9323c499-0cc1-4107-a804-f3b70c3bf1cf))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4c65970c]
    []
 {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
[WARN ] 2020-04-14T08:26:26,190Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=d7f33b3f-2ba2-4745-91b7-b84e6c1d0a97, invocation_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, invocation_timestamp=2020-04-14T08:26:25.957Z, origin=O=Mock Company 1, L=London, C=GB, session_id=fadfd5c3-0c37-4f9e-8d6b-9ecddb799ca1, session_timestamp=2020-04-14T08:26:25.957Z, thread-id=154, tx_id=8ECCA2A9EBEB2B02C30C5837117B1A91B397E81E992658FD1A1CBAE7103C4B80}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=5844883296483956194) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:26:47,554Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:26:47,867Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:49,642Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:26:49,683Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:49,720Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:49,720Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:26:49,734Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:49,734Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:26:49,734Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:26:49,734Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:26:49,734Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:49,758Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:26:49,784Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:49,784Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:26:49,784Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:49,784Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:26:49,784Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:26:49,820Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:26:49,821Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:49,912Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:49,912Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:49,941Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:26:50,074Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:50,074Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:26:50,086Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:50,122Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:26:50,122Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:26:50,122Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:50,135Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:26:50,135Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:50,135Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:26:50,135Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:50,135Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,135Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,173Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:26:50,174Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:26:50,174Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:50,174Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:26:50,186Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:26:50,198Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:50,198Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:26:50,198Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:26:50,198Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:50,225Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:26:50,225Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:26:50,257Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:26:50,480Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082642.287\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:26:50,487Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082642.287/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:26:50,517Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082642.287/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:26:51,602Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:26:51,695Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:51,697Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:51,698Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:26:51,893Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:26:42.215Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:26:56,933Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:56,940Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082642.287\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:56,940Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:56,992Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:57,131Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:57,152Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:26:59,421Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:00,047Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:00,052Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:00,056Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:00,056Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:00,140Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:00,187Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:27:00,208Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:27:00,208Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:27:00,439Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:27:00,450Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:27:00,450Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:00,458Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:27:00,631Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:00,690Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:27:00,712Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:00,742Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:00,780Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:27:00,784Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:27:00,787Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:27:01,291Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:01,318Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:01,320Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:01,321Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:01,321Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:01,331Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082642.287\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:27:01,332Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082642.287/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:27:01,332Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082642.287/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:27:01,344Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:27:01,373Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:27:01,402Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:01,402Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:01,402Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:01,407Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:26:42.215Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:27:02,214Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,220Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082642.287\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,220Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,263Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,267Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,267Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,431Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,444Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,444Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,449Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,449Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,513Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:02,522Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:27:02,526Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:02,526Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:02,683Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:02,685Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:27:02,716Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:27:02,716Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,719Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:02,729Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,739Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:27:02,744Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,748Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:02,820Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:27:02,833Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,838Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:02,840Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:27:02,852Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,854Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:02,870Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,870Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:02,871Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:02,871Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:02,884Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082642.287\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:27:02,885Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082642.287/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:27:02,885Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082642.287/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:27:02,935Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:27:02,988Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:02,988Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:02,988Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:02,993Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:26:42.215Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:27:03,879Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:03,884Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082642.287\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:03,884Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:03,915Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:03,920Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:03,920Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,090Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,105Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,106Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,109Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,109Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,188Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:04,199Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:27:04,200Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:04,200Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:04,336Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:04,338Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:27:04,368Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:27:04,368Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,372Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:04,382Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,392Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:27:04,397Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,402Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:04,447Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:27:04,459Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,463Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852820450) {}
[INFO ] 2020-04-14T08:27:04,466Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:27:04,477Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,479Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:04,490Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852822716) {}
[INFO ] 2020-04-14T08:27:04,491Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:04,501Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,502Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:04,512Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,512Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:04,512Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852824368) {}
[INFO ] 2020-04-14T08:27:04,512Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:27:05,395Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:05,428Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:05,428Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:05,431Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:07,031Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:07,071Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:07,103Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:07,110Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:07,243Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150}
[WARN ] 2020-04-14T08:27:07,261Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,269Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,269Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,401Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,634Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,688Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[WARN ] 2020-04-14T08:27:07,708Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,734Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,735Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=8006043f-5545-4fad-a440-72eef2992f2a, invocation_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, invocation_timestamp=2020-04-14T08:27:04.572Z, origin=Only For Testing, session_id=39d9de63-977d-4f06-b6ff-9ffeb150f96f, session_timestamp=2020-04-14T08:27:04.572Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,767Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,773Z [Mock network] statemachine.StaffedFlowHospital. - Flow [d399e83f-38f3-4157-a5a2-3c26f888b346] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@707d43f1, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0) {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[INFO ] 2020-04-14T08:27:07,778Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:27:07,782Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:27:07,820Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d399e83f-38f3-4157-a5a2-3c26f888b346] errored, dumping all transitions:

 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.592Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=69617FCFFCBA3751266EEACA7C172E16B5B3D584C62401BDACCD8F62BE0C5B5B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4bc7383f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4bc7383f])
    SignalFlowHasStarted(flowId=[d399e83f-38f3-4157-a5a2-3c26f888b346])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2079482169993527106), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7934520509839974906), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2079482169993527106-8288894715688234112-0-0), senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7934520509839974906): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4bc7383f]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.597Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.602Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.623Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), maySkipCheckpoint=false, fiber=056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9, )
  Actions: 
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=69617FCFFCBA3751266EEACA7C172E16B5B3D584C62401BDACCD8F62BE0C5B5B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.628Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7934520509839974906).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.642Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.650Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.654Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.656Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.656Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.681Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15, )
  Actions: 
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9
    63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.688Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2079482169993527106), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2079482169993527106-8288894715688234112-2-0), senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.688Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.710Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.716Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), maySkipCheckpoint=false, fiber=90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7, )
  Actions: 
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))])
checkpoint.flowState.frozenFiber.hash: 
    63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15
    90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.716Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.767Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7934520509839974906), payload=net.corda.node.services.statemachine.EndSessionMessage@4796cf9e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7934520509839974906).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=2079482169993527106))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.767Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.767Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.783Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-960342635692515601, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.787Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.787Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[WARN ] 2020-04-14T08:27:07,820Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d399e83f-38f3-4157-a5a2-3c26f888b346] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:27:07,825Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[WARN ] 2020-04-14T08:27:07,862Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d399e83f-38f3-4157-a5a2-3c26f888b346] errored, dumping all transitions:

 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.592Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=69617FCFFCBA3751266EEACA7C172E16B5B3D584C62401BDACCD8F62BE0C5B5B), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4bc7383f])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4bc7383f])
    SignalFlowHasStarted(flowId=[d399e83f-38f3-4157-a5a2-3c26f888b346])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2079482169993527106), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7934520509839974906), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2079482169993527106-8288894715688234112-0-0), senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7934520509839974906): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4bc7383f]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.597Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.602Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.623Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), maySkipCheckpoint=false, fiber=056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9, )
  Actions: 
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=69617FCFFCBA3751266EEACA7C172E16B5B3D584C62401BDACCD8F62BE0C5B5B)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.628Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7934520509839974906).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.642Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.650Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.654Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.656Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.656Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.681Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15, )
  Actions: 
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    056108D9F7B9B392A286EB8D010DF37835914D29165FC811508B34A306F240D9
    63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.688Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=2079482169993527106), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-2079482169993527106-8288894715688234112-2-0), senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.688Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.710Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.716Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), maySkipCheckpoint=false, fiber=90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7, )
  Actions: 
    PersistCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=2079482169993527106)), errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))])
checkpoint.flowState.frozenFiber.hash: 
    63853DF31F627820F25A00A8379F8B4589AA3D38492824B0CAC67A9276E13C15
    90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.716Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.767Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7934520509839974906), payload=net.corda.node.services.statemachine.EndSessionMessage@4796cf9e), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7934520509839974906).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=2079482169993527106))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.767Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.767Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.783Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-960342635692515601, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.787Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.787Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [d399e83f-38f3-4157-a5a2-3c26f888b346] ---
  Timestamp: 2020-04-14T08:27:07.846Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-960342635692515601)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)], senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0)
    CreateTransaction
    RemoveCheckpoint(id=[d399e83f-38f3-4157-a5a2-3c26f888b346])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f])
    ReleaseSoftLocks(uuid=d399e83f-38f3-4157-a5a2-3c26f888b346)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7934520509839974906)])
    RemoveFlow(flowId=[d399e83f-38f3-4157-a5a2-3c26f888b346], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-960342635692515601, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Invocation, sessionId=4df5caec-65e0-425e-a263-67badb2c2142, timestamp: 2020-04-14T08:27:07.562Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7934520509839974906)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-2079482169993527106-8288894715688234112)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7934520509839974906))]), frozenFiber=90444CD68219E0943D983BBECE9D32AE5A168DEB18F00B4856FECEB96471A3F7), errorState=Errored(errors=[FlowError(errorId=-960342635692515601, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@707d43f1, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=692b3f1f-89af-4cf0-b97d-ae24de5fcde0))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@4859c23f]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
[WARN ] 2020-04-14T08:27:07,862Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [d399e83f-38f3-4157-a5a2-3c26f888b346] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=d399e83f-38f3-4157-a5a2-3c26f888b346, invocation_id=4df5caec-65e0-425e-a263-67badb2c2142, invocation_timestamp=2020-04-14T08:27:07.562Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4df5caec-65e0-425e-a263-67badb2c2142, session_timestamp=2020-04-14T08:27:07.562Z, thread-id=150, tx_id=F81025F395D9E39CCD1A38125839FF67756B29BDB97A6A0748708686EFBDE492}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7934520509839974906) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:27:34,857Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:27:35,111Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:27:36,644Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:27:36,673Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:27:36,759Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:27:36,759Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:27:36,760Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:27:36,760Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:27:36,760Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:27:36,760Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:27:36,760Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:27:36,784Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:27:36,808Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:27:36,809Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:27:36,809Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:27:36,822Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:27:36,822Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:27:36,897Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:27:36,897Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:27:36,897Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:27:36,920Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:27:36,932Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:27:37,022Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:27:37,022Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:27:37,058Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,093Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:27:37,132Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,132Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:27:37,144Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:27:37,145Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:27:37,145Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:27:37,156Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:27:37,156Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:27:37,156Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:27:37,156Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:27:37,158Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:27:37,178Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:27:37,178Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:27:37,209Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:27:37,393Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082728.948\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:27:37,396Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082728.948/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:27:37,423Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082728.948/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:27:38,391Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:27:38,482Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:38,482Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:38,485Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:38,658Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:27:28.878Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:27:43,006Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:43,026Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082728.948\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:43,026Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:43,072Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:43,194Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:43,200Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:45,328Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:45,940Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:45,944Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:45,948Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:45,948Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:46,048Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:46,094Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:27:46,116Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:27:46,116Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:27:46,333Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:27:46,346Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:27:46,346Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:46,353Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:27:46,537Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:46,619Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:27:46,648Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:46,680Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:46,719Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:27:46,725Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:27:46,727Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:27:47,226Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:47,250Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:47,252Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:47,253Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:47,253Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:47,320Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082728.948\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:27:47,322Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082728.948/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:27:47,322Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082728.948/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:27:47,342Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:27:47,395Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:27:47,449Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:47,449Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:47,449Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:47,455Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:27:28.878Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:27:48,061Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,064Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082728.948\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,064Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,085Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,088Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,088Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,227Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,241Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,243Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,247Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,247Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,328Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:48,336Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:27:48,340Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:48,340Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:48,484Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:48,490Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:27:48,521Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:27:48,521Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,523Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:48,533Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,545Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:27:48,551Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,556Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:48,605Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:27:48,615Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,620Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:48,622Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:27:48,637Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,639Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:48,655Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,655Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:48,656Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:48,656Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:48,670Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082728.948\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:27:48,671Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082728.948/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:27:48,671Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082728.948/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:27:48,717Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:27:48,753Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:48,753Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:48,753Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:27:48,757Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:27:28.878Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:27:49,291Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,294Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082728.948\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,295Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,314Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,320Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,320Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,457Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,467Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,469Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,471Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,471Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,541Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:27:49,551Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:27:49,553Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:49,553Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:49,679Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:27:49,681Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:27:49,709Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:27:49,709Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,710Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:49,719Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,726Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:27:49,730Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,736Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:49,780Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:27:49,792Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,796Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852866346) {}
[INFO ] 2020-04-14T08:27:49,797Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:27:49,809Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,811Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:49,822Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852868521) {}
[INFO ] 2020-04-14T08:27:49,824Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:49,834Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,835Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:27:49,846Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,846Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:27:49,846Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852869709) {}
[INFO ] 2020-04-14T08:27:49,846Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:27:50,528Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:50,552Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:50,552Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:50,555Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:52,052Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:52,093Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:52,119Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:52,127Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:52,239Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151}
[WARN ] 2020-04-14T08:27:52,257Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,264Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,264Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,384Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,596Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,646Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[WARN ] 2020-04-14T08:27:52,654Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,675Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,675Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=852d008e-8f34-4d86-a65e-be1d4f0fa587, invocation_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, invocation_timestamp=2020-04-14T08:27:49.889Z, origin=Only For Testing, session_id=b25561fa-d1ca-4c15-985b-e3c9011d4089, session_timestamp=2020-04-14T08:27:49.889Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,702Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,707Z [Mock network] statemachine.StaffedFlowHospital. - Flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@2a03c40b, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8) {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[INFO ] 2020-04-14T08:27:52,711Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:27:52,715Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:27:52,747Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] errored, dumping all transitions:

 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.560Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=09632386F584B1F396C3AC9F7F34FB10A853CC04452834FDD5FBF6BF4AFA2B63), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2226ac52])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2226ac52])
    SignalFlowHasStarted(flowId=[4dbd659f-4e56-47dc-a472-3dff6011ddc6])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=669505121984484385), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6831145365353123318), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-669505121984484385--1996877513938298503-0-0), senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6831145365353123318): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2226ac52]
    []


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.563Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.567Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.587Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), maySkipCheckpoint=false, fiber=4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9, )
  Actions: 
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=09632386F584B1F396C3AC9F7F34FB10A853CC04452834FDD5FBF6BF4AFA2B63)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.591Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6831145365353123318).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.602Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.611Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.615Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.616Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.617Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.637Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E, )
  Actions: 
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9
    A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.645Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=669505121984484385), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-669505121984484385--1996877513938298503-2-0), senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.646Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.656Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.658Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), maySkipCheckpoint=false, fiber=14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C, )
  Actions: 
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))])
checkpoint.flowState.frozenFiber.hash: 
    A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E
    14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.658Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.702Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6831145365353123318), payload=net.corda.node.services.statemachine.EndSessionMessage@61afd1d9), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6831145365353123318).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=669505121984484385))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.702Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.702Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.717Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5897698922839061609, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.720Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.722Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[WARN ] 2020-04-14T08:27:52,747Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:27:52,752Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[WARN ] 2020-04-14T08:27:52,781Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] errored, dumping all transitions:

 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.560Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=09632386F584B1F396C3AC9F7F34FB10A853CC04452834FDD5FBF6BF4AFA2B63), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2226ac52])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2226ac52])
    SignalFlowHasStarted(flowId=[4dbd659f-4e56-47dc-a472-3dff6011ddc6])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=669505121984484385), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-6831145365353123318), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-669505121984484385--1996877513938298503-0-0), senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6831145365353123318): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@2226ac52]
    []


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.563Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.567Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.587Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), maySkipCheckpoint=false, fiber=4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9, )
  Actions: 
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=09632386F584B1F396C3AC9F7F34FB10A853CC04452834FDD5FBF6BF4AFA2B63)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.591Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6831145365353123318).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.602Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.611Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.615Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.616Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.617Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.637Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E, )
  Actions: 
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    4B6179E235FFCE15B5C76BF3E0EA2B45ABBCE4D37B2C6DE237F988C06DC531E9
    A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.645Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=669505121984484385), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-669505121984484385--1996877513938298503-2-0), senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.646Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.656Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.658Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), maySkipCheckpoint=false, fiber=14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C, )
  Actions: 
    PersistCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=669505121984484385)), errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))])
checkpoint.flowState.frozenFiber.hash: 
    A7A0CC39DC9614D1A1C7A592DE4297DA22EA267320268D8E5A9C1D903C353C6E
    14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.658Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.702Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-6831145365353123318), payload=net.corda.node.services.statemachine.EndSessionMessage@61afd1d9), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-6831145365353123318).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=669505121984484385))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.702Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.702Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.717Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=5897698922839061609, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.720Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.722Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] ---
  Timestamp: 2020-04-14T08:27:52.773Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=5897698922839061609)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)], senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8)
    CreateTransaction
    RemoveCheckpoint(id=[4dbd659f-4e56-47dc-a472-3dff6011ddc6])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46])
    ReleaseSoftLocks(uuid=4dbd659f-4e56-47dc-a472-3dff6011ddc6)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-6831145365353123318)])
    RemoveFlow(flowId=[4dbd659f-4e56-47dc-a472-3dff6011ddc6], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=5897698922839061609, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Invocation, sessionId=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, timestamp: 2020-04-14T08:27:52.530Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-6831145365353123318)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-669505121984484385--1996877513938298503)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-6831145365353123318))]), frozenFiber=14991C975C9F29C9D3613FF42F6DD89587634E51A5F825648D8EE50BC9DF1D3C), errorState=Errored(errors=[FlowError(errorId=5897698922839061609, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@2a03c40b, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=f2cee7fa-8c05-4e24-8114-dda1f7ea92b8))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c819e46]
    []
 {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
[WARN ] 2020-04-14T08:27:52,781Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [4dbd659f-4e56-47dc-a472-3dff6011ddc6] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=4dbd659f-4e56-47dc-a472-3dff6011ddc6, invocation_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, invocation_timestamp=2020-04-14T08:27:52.530Z, origin=O=Mock Company 1, L=London, C=GB, session_id=a9f731cd-a80a-477c-8f6c-26ccca60dd7a, session_timestamp=2020-04-14T08:27:52.530Z, thread-id=151, tx_id=7A6F06A5BBC40F2EE85502AB04CD9E8126F8EF68C653B7C9C6F26788BA2C37F1}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-6831145365353123318) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:28:10,589Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:28:10,991Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:13,109Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:28:13,140Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:28:13,202Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:13,224Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:28:13,248Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:13,248Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:28:13,248Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:13,248Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:28:13,249Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:13,296Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:28:13,297Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:13,319Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:13,319Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:13,332Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:28:13,494Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:13,494Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:28:13,559Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:13,593Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:28:13,593Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:13,593Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:13,608Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:28:13,608Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:13,608Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:28:13,608Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:13,608Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,622Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,655Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:13,669Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:28:13,694Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:13,709Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:13,709Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:28:13,709Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:13,713Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:13,735Z [Connection worker] internal.TestCordappImpl. - Cleaning VCS Checkout Cache (C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle\vcs-1) {}
[INFO ] 2020-04-14T08:28:13,735Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:13,735Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:28:13,794Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:13,835Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:28:14,134Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082804.092\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:28:14,140Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082804.092/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:28:14,171Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082804.092/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:28:15,266Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:28:15,433Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:15,434Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:15,436Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:15,609Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:28:04.009Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:28:20,312Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:20,317Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082804.092\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:20,317Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:20,358Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:20,477Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:20,487Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:22,662Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:23,271Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:23,275Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:23,280Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:23,280Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:23,378Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:23,431Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:28:23,459Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:28:23,459Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:28:23,705Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:28:23,715Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:28:23,715Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:23,721Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:28:23,872Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:23,958Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:28:23,985Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:24,019Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:24,058Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:28:24,065Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:28:24,068Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:28:24,629Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:24,651Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:24,653Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:24,654Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:24,654Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:24,665Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082804.092\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:28:24,666Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082804.092/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:28:24,666Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082804.092/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:28:24,686Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:28:24,712Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:28:24,739Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:24,741Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:24,741Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:24,744Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:28:04.009Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:28:25,373Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,378Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082804.092\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,378Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,400Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,404Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,404Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,563Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,576Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,578Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,580Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,580Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,661Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:25,669Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:28:25,672Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:28:25,673Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:28:25,806Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:28:25,809Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:28:25,838Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:28:25,838Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:25,840Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:28:25,847Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:25,905Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:28:25,913Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:25,923Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:26,004Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:28:26,018Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:26,022Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:26,024Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:28:26,034Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:26,035Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:28:26,045Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:26,045Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:26,045Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:26,045Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:26,084Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082804.092\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:28:26,085Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082804.092/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:28:26,085Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082804.092/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:28:26,146Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:28:26,193Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:26,193Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:26,193Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:26,198Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:28:04.009Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:28:26,747Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,756Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082804.092\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,756Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,781Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,785Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,786Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,929Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,940Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,941Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,944Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:26,944Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:27,003Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:27,012Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:28:27,014Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:28:27,014Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:28:27,125Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:28:27,127Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:28:27,154Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:28:27,154Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,157Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:28:27,167Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,179Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:28:27,183Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,189Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:27,234Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:28:27,242Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,246Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852903715) {}
[INFO ] 2020-04-14T08:28:27,248Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:28:27,260Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,261Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:28:27,272Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852905838) {}
[INFO ] 2020-04-14T08:28:27,273Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:28:27,283Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,284Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:28:27,292Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,292Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:27,292Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852907154) {}
[INFO ] 2020-04-14T08:28:27,292Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:28:28,001Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:28,025Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:28,025Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:28,028Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:29,577Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:29,617Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:29,642Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:29,649Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:29,759Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150}
[WARN ] 2020-04-14T08:28:29,776Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:29,783Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:29,783Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:29,916Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,138Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,186Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[WARN ] 2020-04-14T08:28:30,194Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,223Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,223Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=012c5a28-220f-4a18-bfa6-ec49f8d25612, invocation_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, invocation_timestamp=2020-04-14T08:28:27.336Z, origin=Only For Testing, session_id=04ba6d90-82c5-489e-b31a-68a12db67fcc, session_timestamp=2020-04-14T08:28:27.336Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,252Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,258Z [Mock network] statemachine.StaffedFlowHospital. - Flow [b724df8a-8185-4bea-a5b5-742815079b21] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@399f10ca, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00) {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[INFO ] 2020-04-14T08:28:30,262Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:28:30,266Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:28:30,312Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b724df8a-8185-4bea-a5b5-742815079b21] errored, dumping all transitions:

 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.101Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=C6E4E818134B57C5B7507D4D734F18B84C4BBB72C6F89916D7F64E1EF246A422), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60488b9e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60488b9e])
    SignalFlowHasStarted(flowId=[b724df8a-8185-4bea-a5b5-742815079b21])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2349182714507383421), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7177898290704570527), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2349182714507383421--937325814880820442-0-0), senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7177898290704570527): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60488b9e]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.105Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.109Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.130Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), maySkipCheckpoint=false, fiber=F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489, )
  Actions: 
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=C6E4E818134B57C5B7507D4D734F18B84C4BBB72C6F89916D7F64E1EF246A422)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.134Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7177898290704570527).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.146Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.155Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.159Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.161Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.161Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.184Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283, )
  Actions: 
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489
    FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.186Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2349182714507383421), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2349182714507383421--937325814880820442-2-0), senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.186Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.194Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.204Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), maySkipCheckpoint=false, fiber=C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677, )
  Actions: 
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))])
checkpoint.flowState.frozenFiber.hash: 
    FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283
    C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.205Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.252Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7177898290704570527), payload=net.corda.node.services.statemachine.EndSessionMessage@2d264fd9), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7177898290704570527).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.252Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.252Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.266Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4892264485072610370, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.286Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.287Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[WARN ] 2020-04-14T08:28:30,312Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b724df8a-8185-4bea-a5b5-742815079b21] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:28:30,312Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[WARN ] 2020-04-14T08:28:30,342Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b724df8a-8185-4bea-a5b5-742815079b21] errored, dumping all transitions:

 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.101Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=C6E4E818134B57C5B7507D4D734F18B84C4BBB72C6F89916D7F64E1EF246A422), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60488b9e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60488b9e])
    SignalFlowHasStarted(flowId=[b724df8a-8185-4bea-a5b5-742815079b21])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2349182714507383421), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-7177898290704570527), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2349182714507383421--937325814880820442-0-0), senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7177898290704570527): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@60488b9e]
    []
isAnyCheckpointPersisted: 
    false
    true
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.105Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.109Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.130Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), maySkipCheckpoint=false, fiber=F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489, )
  Actions: 
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=C6E4E818134B57C5B7507D4D734F18B84C4BBB72C6F89916D7F64E1EF246A422)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.134Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7177898290704570527).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.146Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.155Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.159Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.161Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.161Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.184Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283, )
  Actions: 
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    F813AC625413D9AE387143B7B8C024782AEA2F823C4562F91CD620A93F015489
    FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.186Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-2349182714507383421), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--2349182714507383421--937325814880820442-2-0), senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.186Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.194Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.204Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), maySkipCheckpoint=false, fiber=C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677, )
  Actions: 
    PersistCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421)), errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))])
checkpoint.flowState.frozenFiber.hash: 
    FFF21954A04CFC510C439869A8891D8D9BE1E1A5EA1F3EDC0B2E9240E8767283
    C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.205Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.252Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-7177898290704570527), payload=net.corda.node.services.statemachine.EndSessionMessage@2d264fd9), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-7177898290704570527).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-2349182714507383421))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.252Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.252Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.266Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=4892264485072610370, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.286Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.287Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [b724df8a-8185-4bea-a5b5-742815079b21] ---
  Timestamp: 2020-04-14T08:28:30.334Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=4892264485072610370)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)], senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00)
    CreateTransaction
    RemoveCheckpoint(id=[b724df8a-8185-4bea-a5b5-742815079b21])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f])
    ReleaseSoftLocks(uuid=b724df8a-8185-4bea-a5b5-742815079b21)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-7177898290704570527)])
    RemoveFlow(flowId=[b724df8a-8185-4bea-a5b5-742815079b21], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=4892264485072610370, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Invocation, sessionId=d7657b39-e314-4e3a-933d-dd32df1b6abd, timestamp: 2020-04-14T08:28:30.070Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-7177898290704570527)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--2349182714507383421--937325814880820442)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-7177898290704570527))]), frozenFiber=C7C3F811BDABBEBC68B9037A71E76570EE4FA2D8141132D77D2CB377C8476677), errorState=Errored(errors=[FlowError(errorId=4892264485072610370, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@399f10ca, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3120a8f6-c286-4b7b-8be7-a686babbeb00))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@518e9f0f]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
[WARN ] 2020-04-14T08:28:30,342Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [b724df8a-8185-4bea-a5b5-742815079b21] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=b724df8a-8185-4bea-a5b5-742815079b21, invocation_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, invocation_timestamp=2020-04-14T08:28:30.070Z, origin=O=Mock Company 1, L=London, C=GB, session_id=d7657b39-e314-4e3a-933d-dd32df1b6abd, session_timestamp=2020-04-14T08:28:30.070Z, thread-id=150, tx_id=5635AD0971BA6C16FFF2B8DE5B7C1F093E3CC59EA31696F07238076DC1649D98}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-7177898290704570527) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:28:45,776Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:28:46,133Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:48,249Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:28:48,276Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:48,320Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:48,320Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:28:48,331Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:48,331Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:28:48,331Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:28:48,331Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:28:48,331Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:48,343Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:28:48,369Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:48,369Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:28:48,370Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:48,370Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:28:48,370Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:28:48,417Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:28:48,417Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:48,417Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:48,428Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:48,440Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:28:48,537Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:48,537Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:28:48,572Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:48,608Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:28:48,608Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,620Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:28:48,665Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,665Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:48,665Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,665Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:48,666Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,666Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:48,666Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,666Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:48,679Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:28:48,703Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:28:48,713Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:48,713Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:28:48,713Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:28:48,715Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:48,742Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:28:48,742Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:28:48,766Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:28:48,982Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082839.301\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:28:48,998Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082839.301/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:28:49,035Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082839.301/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:28:50,194Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:28:50,311Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:50,312Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:50,313Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:50,530Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:28:39.215Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:28:55,316Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:55,321Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082839.301\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:55,321Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:55,359Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:55,462Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:55,471Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:57,686Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:58,317Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:58,323Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:58,328Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:58,328Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:58,404Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:28:58,456Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:28:58,479Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:28:58,479Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:28:58,713Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:28:58,724Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:28:58,724Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:28:58,732Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:28:58,900Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:28:58,954Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:28:58,975Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:28:59,018Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:59,054Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:28:59,059Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:28:59,062Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:28:59,555Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:28:59,577Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:28:59,579Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:59,579Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:28:59,579Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:28:59,588Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082839.301\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:28:59,589Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082839.301/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:28:59,589Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082839.301/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:28:59,600Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:28:59,667Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:28:59,698Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:59,698Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:59,700Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:28:59,702Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:28:39.215Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:29:00,387Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,391Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082839.301\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,391Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,413Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,416Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,416Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,581Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,596Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,598Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,600Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,600Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,676Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:00,687Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:29:00,691Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:29:00,691Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:29:00,845Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:29:00,849Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:29:00,882Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:29:00,882Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:00,884Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:29:00,894Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:00,907Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:29:00,912Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:00,918Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:29:00,961Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:29:00,972Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:00,979Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:29:00,982Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:29:00,994Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:00,996Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:29:01,009Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:01,010Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:29:01,010Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:01,010Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:29:01,020Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-082839.301\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:29:01,021Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082839.301/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:29:01,021Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-082839.301/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:29:01,099Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:29:01,127Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:29:01,127Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:29:01,127Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:29:01,132Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:28:39.215Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:29:01,801Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,804Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-082839.301\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,804Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,823Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,828Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,828Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,969Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,982Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,983Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,988Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:01,988Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:02,076Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:29:02,084Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:29:02,085Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:29:02,085Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:29:02,224Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:29:02,229Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:29:02,252Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:29:02,252Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,254Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:29:02,264Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,273Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:29:02,277Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,281Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:29:02,324Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:29:02,335Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,338Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586852938724) {}
[INFO ] 2020-04-14T08:29:02,340Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:29:02,352Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,353Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:29:02,366Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586852940882) {}
[INFO ] 2020-04-14T08:29:02,368Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:29:02,377Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,379Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:29:02,391Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,391Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:29:02,392Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586852942252) {}
[INFO ] 2020-04-14T08:29:02,392Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:29:03,128Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:03,160Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:03,160Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:03,165Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:04,852Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:04,891Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:04,929Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:04,937Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:05,068Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150}
[WARN ] 2020-04-14T08:29:05,087Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,096Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,096Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,238Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,468Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,524Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[WARN ] 2020-04-14T08:29:05,534Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,561Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,561Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=08ed4ade-1f36-4a76-bde7-cc53dae6a4af, invocation_id=2216142f-c029-40b8-905c-5e8a0d4edea3, invocation_timestamp=2020-04-14T08:29:02.443Z, origin=Only For Testing, session_id=2216142f-c029-40b8-905c-5e8a0d4edea3, session_timestamp=2020-04-14T08:29:02.443Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,596Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,600Z [Mock network] statemachine.StaffedFlowHospital. - Flow [ccbeb375-3441-4978-9049-49a27c45779c] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@163a50f2, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78) {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[INFO ] 2020-04-14T08:29:05,604Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:29:05,610Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:29:05,641Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ccbeb375-3441-4978-9049-49a27c45779c] errored, dumping all transitions:

 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.422Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=41EE4B8D921D5873FD0B48359A3EABA59758FAEF082FCFCB29FB3DF61BDDD5CC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29b70c7e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29b70c7e])
    SignalFlowHasStarted(flowId=[ccbeb375-3441-4978-9049-49a27c45779c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9197259650559365351), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3225236232210593115), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9197259650559365351--4749703363337487223-0-0), senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29b70c7e]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3225236232210593115): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.426Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.432Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.457Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), maySkipCheckpoint=false, fiber=3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0, )
  Actions: 
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=41EE4B8D921D5873FD0B48359A3EABA59758FAEF082FCFCB29FB3DF61BDDD5CC)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0)


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.461Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3225236232210593115).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.476Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.487Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.492Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.494Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.494Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.519Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B, )
  Actions: 
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0
    6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.524Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9197259650559365351), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9197259650559365351--4749703363337487223-2-0), senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.524Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.538Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.540Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), maySkipCheckpoint=false, fiber=DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6, )
  Actions: 
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B
    DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))])


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.544Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.593Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3225236232210593115), payload=net.corda.node.services.statemachine.EndSessionMessage@5a2456c1), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555]
checkpoint.sessions.SessionId(toLong=-3225236232210593115).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351))
    Ended


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.595Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.596Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.612Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6733957562997130864, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.613Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.619Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[WARN ] 2020-04-14T08:29:05,641Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ccbeb375-3441-4978-9049-49a27c45779c] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:29:05,643Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[WARN ] 2020-04-14T08:29:05,674Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ccbeb375-3441-4978-9049-49a27c45779c] errored, dumping all transitions:

 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.422Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=41EE4B8D921D5873FD0B48359A3EABA59758FAEF082FCFCB29FB3DF61BDDD5CC), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29b70c7e])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29b70c7e])
    SignalFlowHasStarted(flowId=[ccbeb375-3441-4978-9049-49a27c45779c])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9197259650559365351), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-3225236232210593115), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9197259650559365351--4749703363337487223-0-0), senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@29b70c7e]
    []
isAnyCheckpointPersisted: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3225236232210593115): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.426Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.432Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.457Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), maySkipCheckpoint=false, fiber=3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0, )
  Actions: 
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=41EE4B8D921D5873FD0B48359A3EABA59758FAEF082FCFCB29FB3DF61BDDD5CC)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0)


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.461Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
isFlowResumed: 
    false
    true
checkpoint.sessions.SessionId(toLong=-3225236232210593115).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.476Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.487Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.492Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.494Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.494Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.519Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B, )
  Actions: 
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.frozenFiber.hash: 
    3CC1A6976A5419BDB51F23656A7A895ECDD7BB7184E4B6B7D60D08BBB7F6CAA0
    6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.524Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-9197259650559365351), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D--9197259650559365351--4749703363337487223-2-0), senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.524Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.538Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.540Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), maySkipCheckpoint=false, fiber=DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6, )
  Actions: 
    PersistCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351)), errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.frozenFiber.hash: 
    6516343D36D469D8A6808D4E36655B3D668F4B3ADFBCBACE865CED4BDB4C204B
    DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))])


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.544Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.593Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-3225236232210593115), payload=net.corda.node.services.statemachine.EndSessionMessage@5a2456c1), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555]
checkpoint.sessions.SessionId(toLong=-3225236232210593115).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=-9197259650559365351))
    Ended


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.595Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.596Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.612Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
isFlowResumed: 
    true
    false
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-6733957562997130864, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)], propagatedIndex=0, propagating=false)


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.613Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.619Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [ccbeb375-3441-4978-9049-49a27c45779c] ---
  Timestamp: 2020-04-14T08:29:05.663Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-6733957562997130864)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)], senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78)
    CreateTransaction
    RemoveCheckpoint(id=[ccbeb375-3441-4978-9049-49a27c45779c])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555])
    ReleaseSoftLocks(uuid=ccbeb375-3441-4978-9049-49a27c45779c)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-3225236232210593115)])
    RemoveFlow(flowId=[ccbeb375-3441-4978-9049-49a27c45779c], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-6733957562997130864, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Invocation, sessionId=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, timestamp: 2020-04-14T08:29:05.383Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-3225236232210593115)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D--9197259650559365351--4749703363337487223)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-3225236232210593115))]), frozenFiber=DF573CFECA52E3C1A2F7FC87D8702ACB0E9B5C280C9D8F6E2882598EA6574AC6), errorState=Errored(errors=[FlowError(errorId=-6733957562997130864, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@163a50f2, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=625f0eb6-8043-4bc8-b902-8681c282ad78))
  Continuation: Abort
  Diff between previous and next state:
isRemoved: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@6fbf5555]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
 {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
[WARN ] 2020-04-14T08:29:05,674Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [ccbeb375-3441-4978-9049-49a27c45779c] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=ccbeb375-3441-4978-9049-49a27c45779c, invocation_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, invocation_timestamp=2020-04-14T08:29:05.383Z, origin=O=Mock Company 1, L=London, C=GB, session_id=11f53c1c-c4e5-4398-ace9-9ddc5e71c83f, session_timestamp=2020-04-14T08:29:05.383Z, thread-id=150, tx_id=D02A30658DFB4C7AAC6DC4A1C8CEB53639B5A3F134D83BD8BCF1413E2FC87775}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-3225236232210593115) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:33:23,147Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:33:23,809Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:33:28,588Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T08:33:32,226Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:33:32,274Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T08:33:32,278Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:33:33,507Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:33:33,568Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:33:34,225Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:33:34,225Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:33:34,225Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:33:34,460Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:33:34,496Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:33:35,728Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:33:36,257Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:33:36,275Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:33:36,332Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:33:36,333Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:33:36,333Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:33:38,117Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:33:38,117Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:33:38,473Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:33:38,548Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:33:38,667Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:33:39,031Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:33:39,031Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:33:39,097Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:33:39,180Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:33:39,180Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:33:39,255Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:33:39,255Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:33:39,255Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:33:39,255Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:33:39,255Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:33:39,270Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,328Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:33:39,420Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,420Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:33:39,442Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,442Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:33:39,442Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,442Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:33:39,455Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,455Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:33:39,455Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,455Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:33:39,455Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,456Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:33:39,457Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:33:39,469Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:33:39,469Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:33:39,552Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:33:39,583Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:33:39,621Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:33:39,621Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:33:39,635Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:33:39,688Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:33:39,701Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:33:39,741Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:33:40,211Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-083309.504\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:33:40,226Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083309.504/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:33:40,288Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083309.504/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:33:42,619Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:33:42,835Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:33:42,837Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:33:42,839Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:33:43,280Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:33:09.358Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:33:53,882Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:33:53,890Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-083309.504\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:33:53,890Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:33:53,951Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:33:54,148Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:33:54,161Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:33:59,399Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:01,009Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:01,014Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:01,022Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:01,022Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:01,233Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:01,318Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:34:01,373Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:34:01,373Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:34:01,924Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:34:01,947Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:34:01,947Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:01,956Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:34:02,365Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:02,528Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:34:02,580Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:02,647Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:02,739Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:34:02,755Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:34:02,759Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:34:04,137Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:04,195Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:04,201Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:04,201Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:04,201Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:04,269Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-083309.504\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:34:04,269Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083309.504/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:34:04,269Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083309.504/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:34:04,289Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:34:04,357Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:34:04,434Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:34:04,434Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:34:04,434Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:34:04,444Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:33:09.358Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:34:05,769Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:05,784Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-083309.504\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:05,784Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:05,819Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:05,821Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:05,821Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,092Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,116Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,118Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,122Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,122Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,256Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:06,272Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:34:06,279Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:34:06,279Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:34:06,538Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:34:06,541Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:34:06,595Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:34:06,595Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,600Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:34:06,615Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,636Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:34:06,645Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,655Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:06,814Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:34:06,843Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,851Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:06,855Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:34:06,879Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,883Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:34:06,901Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,901Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:06,905Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:06,905Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:06,965Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-083309.504\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:34:06,967Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083309.504/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:34:06,967Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083309.504/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:34:07,074Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:34:07,196Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:34:07,196Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:34:07,200Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:34:07,208Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:33:09.358Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:34:08,369Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,372Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-083309.504\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,372Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,416Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,426Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,426Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,677Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,697Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,699Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,703Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,703Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,823Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:34:08,836Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:34:08,836Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:34:08,836Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:34:09,081Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:34:09,085Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:34:09,133Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:34:09,133Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,137Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:34:09,153Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,175Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:34:09,183Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,193Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:09,276Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:34:09,297Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,302Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853241947) {}
[INFO ] 2020-04-14T08:34:09,309Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:34:09,329Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,329Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:34:09,362Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853246595) {}
[INFO ] 2020-04-14T08:34:09,364Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:34:09,381Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,386Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:34:09,406Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,406Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:34:09,408Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853249133) {}
[INFO ] 2020-04-14T08:34:09,408Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:34:10,643Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:10,685Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:10,685Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:10,695Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:13,281Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:13,346Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:13,402Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:13,416Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:13,653Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156}
[WARN ] 2020-04-14T08:34:13,689Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:13,710Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:13,710Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,007Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,454Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,554Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[WARN ] 2020-04-14T08:34:14,570Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,611Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,611Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=31740f24-832a-4e40-ac13-cc96caa92191, invocation_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, invocation_timestamp=2020-04-14T08:34:09.506Z, origin=Only For Testing, session_id=e2126e5e-f66d-4c91-a9b5-4a13797b82c7, session_timestamp=2020-04-14T08:34:09.506Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,672Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,680Z [Mock network] statemachine.StaffedFlowHospital. - Flow [42155e53-0988-4f40-8d91-c8f418424233] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3f14c526, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb) {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[INFO ] 2020-04-14T08:34:14,684Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:34:14,693Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:34:14,754Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [42155e53-0988-4f40-8d91-c8f418424233] errored, dumping all transitions:

 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.334Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E2223410D8260E93050CD227CB272DCD0155E3DCBD4E9EF50127BD247BA4387A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c4aac9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c4aac9])
    SignalFlowHasStarted(flowId=[42155e53-0988-4f40-8d91-c8f418424233])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7818949239115642751), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1239016783572878535), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7818949239115642751--8573510066708599259-0-0), senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c4aac9]
    []
checkpoint.sessions.SessionId(toLong=1239016783572878535): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.344Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.356Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.397Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), maySkipCheckpoint=false, fiber=30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C, )
  Actions: 
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E2223410D8260E93050CD227CB272DCD0155E3DCBD4E9EF50127BD247BA4387A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C)
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.443Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1239016783572878535).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.468Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.484Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.486Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.490Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.490Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.544Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803, )
  Actions: 
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C
    BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.554Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7818949239115642751), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7818949239115642751--8573510066708599259-2-0), senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.554Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.570Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.583Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), maySkipCheckpoint=false, fiber=EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202, )
  Actions: 
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))])
checkpoint.flowState.frozenFiber.hash: 
    BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803
    EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.583Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.667Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1239016783572878535), payload=net.corda.node.services.statemachine.EndSessionMessage@31af2f12), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40]
checkpoint.sessions.SessionId(toLong=1239016783572878535).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=7818949239115642751))
    Ended


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.671Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.672Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.694Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-191218991170940836, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.705Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.708Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[WARN ] 2020-04-14T08:34:14,754Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [42155e53-0988-4f40-8d91-c8f418424233] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:34:14,758Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[WARN ] 2020-04-14T08:34:14,826Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [42155e53-0988-4f40-8d91-c8f418424233] errored, dumping all transitions:

 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.334Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=E2223410D8260E93050CD227CB272DCD0155E3DCBD4E9EF50127BD247BA4387A), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c4aac9])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c4aac9])
    SignalFlowHasStarted(flowId=[42155e53-0988-4f40-8d91-c8f418424233])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7818949239115642751), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=1239016783572878535), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7818949239115642751--8573510066708599259-0-0), senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@c4aac9]
    []
checkpoint.sessions.SessionId(toLong=1239016783572878535): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.344Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.356Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.397Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), maySkipCheckpoint=false, fiber=30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C, )
  Actions: 
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    0
    1
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=E2223410D8260E93050CD227CB272DCD0155E3DCBD4E9EF50127BD247BA4387A)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C)
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.443Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=1239016783572878535).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.468Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.484Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.486Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.490Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.490Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.544Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803, )
  Actions: 
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    1
    2
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    30AD9FAB4FB6138A4A1A84336008494A5AD176C257B1377E25F534177E73004C
    BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.554Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=7818949239115642751), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-7818949239115642751--8573510066708599259-2-0), senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.554Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.570Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.583Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), maySkipCheckpoint=false, fiber=EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202, )
  Actions: 
    PersistCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=7818949239115642751)), errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.numberOfSuspends: 
    2
    3
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))])
checkpoint.flowState.frozenFiber.hash: 
    BFC58F74551415616F9C55D644FEF75CEB91BDEBBF8907C4CFC203F42B681803
    EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.583Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.667Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=1239016783572878535), payload=net.corda.node.services.statemachine.EndSessionMessage@31af2f12), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40]
checkpoint.sessions.SessionId(toLong=1239016783572878535).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=7818949239115642751))
    Ended


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.671Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.672Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.694Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-191218991170940836, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.705Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.708Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [42155e53-0988-4f40-8d91-c8f418424233] ---
  Timestamp: 2020-04-14T08:34:14.793Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-191218991170940836)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)], senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb)
    CreateTransaction
    RemoveCheckpoint(id=[42155e53-0988-4f40-8d91-c8f418424233])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40])
    ReleaseSoftLocks(uuid=42155e53-0988-4f40-8d91-c8f418424233)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=1239016783572878535)])
    RemoveFlow(flowId=[42155e53-0988-4f40-8d91-c8f418424233], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-191218991170940836, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Invocation, sessionId=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, timestamp: 2020-04-14T08:34:14.281Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=1239016783572878535)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-7818949239115642751--8573510066708599259)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=1239016783572878535))]), frozenFiber=EDF9419472BBD8DDD205E2E5444409B70686845FB097584A2F74028FABC21202), errorState=Errored(errors=[FlowError(errorId=-191218991170940836, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@3f14c526, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=3a947211-97ff-40f3-8795-cfb6525bacfb))
  Continuation: Abort
  Diff between previous and next state:
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@22110e40]
    []
checkpoint.errorState.propagatedIndex: 
    0
    1
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
[WARN ] 2020-04-14T08:34:14,826Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [42155e53-0988-4f40-8d91-c8f418424233] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=42155e53-0988-4f40-8d91-c8f418424233, invocation_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, invocation_timestamp=2020-04-14T08:34:14.281Z, origin=O=Mock Company 1, L=London, C=GB, session_id=8e9be9cb-1689-4818-9b3d-cbf2c4f7aeda, session_timestamp=2020-04-14T08:34:14.281Z, thread-id=156, tx_id=FCB3A6B6399C76D9D3ECD14FEC8B6817DC911AAC77DFD47F924F040E97A3B6F9}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=1239016783572878535) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:37:55,716Z [Test worker] internal.TestCordappImpl. - Generating CorDapp jar from local project in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp ... {}
[INFO ] 2020-04-14T08:37:56,367Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:38:00,555Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T08:38:04,009Z [Connection worker] internal.TestCordappImpl. - Connecting to Gradle Daemon {}
[INFO ] 2020-04-14T08:38:04,056Z [Connection worker] internal.TestCordappImpl. - Starting Gradle Daemon {}
[INFO ] 2020-04-14T08:38:04,058Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:38:05,260Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:38:05,295Z [Connection worker] internal.TestCordappImpl. - Evaluate settings {}
[INFO ] 2020-04-14T08:38:05,912Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:38:05,925Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:38:05,925Z [Connection worker] internal.TestCordappImpl. - Load projects {}
[INFO ] 2020-04-14T08:38:06,166Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:38:06,179Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:38:07,255Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :classpath {}
[INFO ] 2020-04-14T08:38:07,793Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:38:07,823Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:38:07,862Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:38:07,863Z [Connection worker] internal.TestCordappImpl. - Resolve files of :classpath {}
[INFO ] 2020-04-14T08:38:07,863Z [Connection worker] internal.TestCordappImpl. - Configure project : {}
[INFO ] 2020-04-14T08:38:09,600Z [Connection worker] internal.TestCordappImpl. - Configure build {}
[INFO ] 2020-04-14T08:38:09,600Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:38:09,924Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:38:10,007Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:38:10,127Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :compileClasspath {}
[INFO ] 2020-04-14T08:38:10,516Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:38:10,516Z [Connection worker] internal.TestCordappImpl. - Resolve files of :compileClasspath {}
[INFO ] 2020-04-14T08:38:10,565Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:38:10,665Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :annotationProcessor {}
[INFO ] 2020-04-14T08:38:10,665Z [Connection worker] internal.TestCordappImpl. - Task :compileJava {}
[INFO ] 2020-04-14T08:38:10,718Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:38:10,718Z [Connection worker] internal.TestCordappImpl. - Task :processResources {}
[INFO ] 2020-04-14T08:38:10,729Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:38:10,729Z [Connection worker] internal.TestCordappImpl. - Task :classes {}
[INFO ] 2020-04-14T08:38:10,729Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:38:10,729Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,783Z [Connection worker] internal.TestCordappImpl. - Resolve dependencies of :runtime {}
[INFO ] 2020-04-14T08:38:10,883Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,883Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:38:10,909Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,909Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:38:10,909Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,909Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:38:10,920Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,920Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:38:10,921Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,921Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:38:10,921Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,921Z [Connection worker] internal.TestCordappImpl. - Resolve files of :runtime {}
[INFO ] 2020-04-14T08:38:10,921Z [Connection worker] internal.TestCordappImpl. - Task :configureCordappFatJar {}
[INFO ] 2020-04-14T08:38:10,932Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:38:10,953Z [Connection worker] internal.TestCordappImpl. - Task :jar {}
[INFO ] 2020-04-14T08:38:11,027Z [Connection worker] internal.TestCordappImpl. - Run tasks {}
[INFO ] 2020-04-14T08:38:11,027Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:38:11,038Z [Connection worker] internal.TestCordappImpl. - Build model 'java.lang.Void' for root project 'bootcamp-cordapp' {}
[INFO ] 2020-04-14T08:38:11,038Z [Connection worker] internal.TestCordappImpl. - Run build {}
[INFO ] 2020-04-14T08:38:11,039Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:38:11,076Z [Connection worker] internal.TestCordappImpl. - Deleting unused version-specific caches in C:\Users\Shanmukhi Priya\corda\bootcamp1\bootcamp-cordapp\.gradle {}
[INFO ] 2020-04-14T08:38:11,076Z [Connection worker] internal.TestCordappImpl. - Build {}
[INFO ] 2020-04-14T08:38:11,124Z [Connection worker] internal.TestCordappImpl. -  {}
[INFO ] 2020-04-14T08:38:11,583Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-083741.927\nodes\0\cordapps] {}
[INFO ] 2020-04-14T08:38:11,595Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083741.927/nodes/0/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:38:11,652Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083741.927/nodes/0/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:38:13,835Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:38:14,038Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:14,041Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:14,045Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:14,479Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:37:41.733Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:38:25,294Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:25,314Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-083741.927\nodes\0\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:25,314Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:25,401Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:25,565Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:25,580Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:30,788Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:32,322Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:32,326Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:32,332Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:32,332Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:32,521Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:32,623Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:38:32,672Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:38:32,673Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:38:33,245Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1), NodeNotarySchemaV1(name=net.corda.node.services.transactions.NodeNotarySchema, version=1)] {}
[INFO ] 2020-04-14T08:38:33,271Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:38:33,271Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:33,282Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:38:33,720Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:33,876Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:38:33,930Z [MockNode-1-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:33,992Z [MockNode-1-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:34,095Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:38:34,107Z [Test worker] utilities.NotaryLoader. - Starting notary service: class net.corda.node.services.transactions.SimpleNotaryService {}
[INFO ] 2020-04-14T08:38:34,118Z [Test worker] notary.SinglePartyNotaryService. - Starting notary in validating mode {}
[INFO ] 2020-04-14T08:38:35,486Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:35,538Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:35,546Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:35,546Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:35,546Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:35,614Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-083741.927\nodes\1\cordapps] {}
[INFO ] 2020-04-14T08:38:35,615Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083741.927/nodes/1/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:38:35,615Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083741.927/nodes/1/cordapps/bootcamp-cordapp.jar {}
[WARN ] 2020-04-14T08:38:35,629Z [Test worker] cordapp.CordappResolver. - The CorDapp (name: Contract: Bootcamp Contracts, Workflow: Bootcamp Flows, file: bootcamp-cordapp) is installed multiple times on the node. The following files correspond to the exact same content: [bootcamp-cordapp] {}
[INFO ] 2020-04-14T08:38:35,683Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:38:35,757Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:35,757Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:35,757Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:35,764Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:37:41.733Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:38:37,012Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,020Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-083741.927\nodes\1\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,020Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,073Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,083Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,083Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,446Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,465Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,470Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,474Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,474Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,619Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:37,633Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:38:37,637Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:38:37,637Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:38:37,897Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:38:37,903Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:38:37,973Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:38:37,973Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:37,974Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:38:37,991Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:38,055Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:38:38,063Z [MockNode-2-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:38,073Z [MockNode-2-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:38,172Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:38:38,196Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:38,202Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:38,209Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:38:38,233Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:38,233Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:38:38,256Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:38,256Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:38,256Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:38,256Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:38,276Z [Test worker] cordapp.JarScanningCordappLoader. - Looking for CorDapps in [build\mock-network\20200414-083741.927\nodes\2\cordapps] {}
[INFO ] 2020-04-14T08:38:38,276Z [Test worker] cordapp.JarScanningCordappLoader. - Loading CorDapps from RestrictedURL(url=file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083741.927/nodes/2/cordapps/bootcamp-cordapp.jar, rootPackageName=null) {}
[INFO ] 2020-04-14T08:38:38,276Z [Test worker] cordapp.JarScanningCordappLoader. - Scanning CorDapp in file:/C:/Users/Shanmukhi%20Priya/corda/bootcamp1/bootcamp-cordapp/build/mock-network/20200414-083741.927/nodes/2/cordapps/bootcamp-cordapp.jar {}
[INFO ] 2020-04-14T08:38:38,341Z [Test worker] internal.InternalMockNetwork$MockNode. - Node starting up ... {}
[INFO ] 2020-04-14T08:38:38,399Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TokenIssueFlowInitiator to initiate bootcamp.TokenIssueFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:38,399Z [Test worker] internal.NodeFlowManager. - Registered bootcamp.TwoPartyFlow to initiate bootcamp.TwoPartyFLowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:38,399Z [Test worker] internal.NodeFlowManager. - Registered examples.ArtTransferFlowInitiator to initiate examples.ArtTransferFlowResponder (version 1) {}
[INFO ] 2020-04-14T08:38:38,408Z [Test worker] internal.InternalMockNetwork$MockNode. - Loaded network parameters: NetworkParameters {
      minimumPlatformVersion=1
      notaries=[NotaryInfo(identity=O=Notary Service, L=Zurich, C=CH, validating=true)]
      maxMessageSize=10485760
      maxTransactionSize=524288000
      whitelistedContractImplementations {
        
      }
      eventHorizon=PT720H
      packageOwnership {
        
      }
      modifiedTime=2020-04-14T08:37:41.733Z
      epoch=1
  } {}
[INFO ] 2020-04-14T08:38:39,570Z [Test worker] persistence.AttachmentVersionNumberMigration. - Start executing... {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,575Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs using network parameters from build\mock-network\20200414-083741.927\nodes\2\network-parameters, whitelistedContractImplementations: {}. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,575Z [Test worker] persistence.AttachmentVersionNumberMigration. - Attachment version creation from whitelisted JARs skipped, no attachments not found. {changeSet=migration/node-services.changelog-init.xml::update-version-of-whitelisted-jars::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,628Z [Test worker] migration.VaultStateMigration. - Migrating vault state data to V4 tables {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,649Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,649Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,855Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [VaultMigrationSchemaV1(name=net.corda.node.migration.VaultMigrationSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1)] {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,868Z [Test worker] migration.VaultStateMigration. - Finished performing vault state data migration for 0 states {changeSet=migration/vault-schema.changelog-v9.xml::update-vault-states::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,873Z [Test worker] migration.PersistentIdentityMigrationNewTable. - Migrating persistent identities with certificates table into persistent table with no certificate data. {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,876Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,876Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:39,991Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [MappedSchema(name=net.corda.node.migration.PersistentIdentitiesMigrationSchema, version=1)] {changeSet=migration/node-services.changelog-init.xml::transfer-to-new-persistence-table::R3.Corda, databaseChangeLog=master.changelog.json}
[INFO ] 2020-04-14T08:38:40,009Z [Test worker] internal.InternalMockNetwork$MockNode. - Connected to H2 database. {}
[INFO ] 2020-04-14T08:38:40,011Z [Test worker] persistence.HibernateConfiguration. - Init HibernateConfiguration for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:38:40,011Z [Test worker] persistence.HibernateConfiguration. - Creating session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:38:40,264Z [Test worker] persistence.HibernateConfiguration. - Created session factory for schemas: [CommonSchemaV1(name=net.corda.core.schemas.CommonSchema, version=1), VaultSchemaV1(name=net.corda.node.services.vault.VaultSchema, version=1), NodeInfoSchemaV1(name=net.corda.node.internal.schemas.NodeInfoSchema, version=1), NodeCoreV1(name=net.corda.node.services.schema.NodeSchemaService$NodeCore, version=1)] {}
[INFO ] 2020-04-14T08:38:40,264Z [Test worker] internal.InternalMockNetwork$MockNode. - identity-private-key not found in key store, generating fresh key! {}
[INFO ] 2020-04-14T08:38:40,312Z [Test worker] internal.InternalMockNetwork$MockNode. - Node-info has changed so submitting update. Old node-info was null {}
[INFO ] 2020-04-14T08:38:40,312Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,316Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:38:40,331Z [Test worker] internal.InternalMockNetwork$MockNode. - New node-info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,394Z [Test worker] network.NetworkMapUpdater. - Auto-accept enabled for network parameter changes which modify only: [epoch, modifiedTime, packageOwnership, whitelistedContractImplementations] {}
[INFO ] 2020-04-14T08:38:40,400Z [MockNode-3-2] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,409Z [MockNode-3-2] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:40,488Z [Test worker] persistence.NodeAttachmentService. - Stored new attachment: id=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0 uploader=app filename=Contract: Bootcamp Contracts, Workflow: Bootcamp Flows {}
[INFO ] 2020-04-14T08:38:40,527Z [Test worker] statemachine.SingleThreadedStateMachineManager. - Node ready, info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,531Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Notary Service, L=Zurich, C=CH], platformVersion=5, serial=1586853513271) {}
[INFO ] 2020-04-14T08:38:40,536Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Notary Service, L=Zurich, C=CH {}
[INFO ] 2020-04-14T08:38:40,557Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,561Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:38:40,579Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 1, L=London, C=GB], platformVersion=5, serial=1586853517973) {}
[INFO ] 2020-04-14T08:38:40,584Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 1, L=London, C=GB {}
[INFO ] 2020-04-14T08:38:40,602Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,606Z [Test worker] network.PersistentNetworkMapCache. - No previous node found for O=Mock Company 2, L=London, C=GB {}
[INFO ] 2020-04-14T08:38:40,623Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,623Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[INFO ] 2020-04-14T08:38:40,623Z [Test worker] network.PersistentNetworkMapCache. - Adding node with info: NodeInfo(addresses=[mock.node:1000], legalIdentitiesAndCerts=[O=Mock Company 2, L=London, C=GB], platformVersion=5, serial=1586853520312) {}
[INFO ] 2020-04-14T08:38:40,623Z [Test worker] network.PersistentNetworkMapCache. - Previous node was identical to incoming one - doing nothing {}
[WARN ] 2020-04-14T08:38:41,902Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:41,946Z [Mock network] transactions.TransactionBuilder. - Signature constraints not available on network requiring a minimum platform version of 4. Current is: 1. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:41,946Z [Mock network] transactions.TransactionBuilder. - Reverting back to using hash constraints for contract bootcamp.TokenContract {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:41,955Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:44,603Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:44,664Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:44,726Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:44,738Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:44,979Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154}
[WARN ] 2020-04-14T08:38:45,017Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,033Z [Mock network] corda.flow. - No need to notarise this transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,033Z [Mock network] corda.flow. - Recording transaction locally. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,290Z [Mock network] corda.flow. - Recorded transaction locally successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,733Z [Mock network] corda.flow. - Received transaction acknowledgement request from party O=Mock Company 1, L=London, C=GB. {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,839Z [Mock network] corda.flow. - Transaction dependencies resolution completed. {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[WARN ] 2020-04-14T08:38:45,850Z [Mock network] contracts.TransactionState. - State class bootcamp.TokenState is not annotated with @BelongsToContract, and does not have an enclosing class which implements Contract. Annotate TokenState with @BelongsToContract(bootcamp.TokenContract.class) to remove this warning. {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,910Z [Mock network] corda.flow. - Party O=Mock Company 2, L=London, C=GB received the transaction. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,910Z [Mock network] corda.flow. - All parties received the transaction successfully. {actor_id=Only For Testing, actor_owning_identity=O=Mock Company 1, L=London, C=GB, actor_store_id=TEST, fiber-id=10000001, flow-id=85f51ce5-3c48-4819-8e01-53f04d189b5a, invocation_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, invocation_timestamp=2020-04-14T08:38:40.723Z, origin=Only For Testing, session_id=94096326-bf8f-46b8-a5b6-a006adf3a43e, session_timestamp=2020-04-14T08:38:40.723Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,965Z [Mock network] corda.flow. - Flow raised an error: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer. Sending it to flow hospital to be triaged. {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,970Z [Mock network] statemachine.StaffedFlowHospital. - Flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] admitted to hospital in state StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2), errorState=Clean, numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@79c8a69c, pendingDeduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b], isFlowResumed=true, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=false, senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123) {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[INFO ] 2020-04-14T08:38:45,980Z [Mock network] statemachine.StaffedFlowHospital. - Error 1 of 1: {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[INFO ] 2020-04-14T08:38:45,984Z [Mock network] statemachine.StaffedFlowHospital. - Flow error allowed to propagate {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:38:46,042Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] errored, dumping all transitions:

 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.661Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9C840BFAFEF87180297FAA11A22C16D28A9386120ADB1E723FBFFC909E557600), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b80bc8a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b80bc8a])
    SignalFlowHasStarted(flowId=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5404662063414377658), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-269754903461173927), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5404662063414377658--1785970533349416571-0-0), senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-269754903461173927): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b80bc8a]
    []


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.671Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.679Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.718Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), maySkipCheckpoint=false, fiber=D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86, )
  Actions: 
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9C840BFAFEF87180297FAA11A22C16D28A9386120ADB1E723FBFFC909E557600)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.726Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-269754903461173927).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.746Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.762Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.771Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.775Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.775Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.828Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954, )
  Actions: 
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86
    7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.839Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5404662063414377658), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5404662063414377658--1785970533349416571-2-0), senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.839Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.854Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.862Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), maySkipCheckpoint=false, fiber=E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2, )
  Actions: 
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))])
checkpoint.flowState.frozenFiber.hash: 
    7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954
    E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.862Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.959Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-269754903461173927), payload=net.corda.node.services.statemachine.EndSessionMessage@7ea71761), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-269754903461173927).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5404662063414377658))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.964Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.965Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.988Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8176102424188100050, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.996Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:46.001Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true
 {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[WARN ] 2020-04-14T08:38:46,042Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
[WARN ] 2020-04-14T08:38:46,052Z [Mock network] statemachine.ActionExecutorImpl. - Propagating error {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[WARN ] 2020-04-14T08:38:46,104Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] errored, dumping all transitions:

 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.661Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Unstarted(flowStart=Initiated, frozenFlowLogic=9C840BFAFEF87180297FAA11A22C16D28A9386120ADB1E723FBFFC909E557600), errorState=Clean, numberOfSuspends=0), isCheckpointUpdate=false)
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b80bc8a])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b80bc8a])
    SignalFlowHasStarted(flowId=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec])
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5404662063414377658), payload=ConfirmSessionMessage(initiatedSessionId=SessionId(toLong=-269754903461173927), initiatedFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>))), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5404662063414377658--1785970533349416571-0-0), senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123))
    CreateTransaction
  Continuation: Resume(result=null)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-269754903461173927): 
    null
    Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)
isFlowResumed: 
    false
    true
isAnyCheckpointPersisted: 
    false
    true
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b80bc8a]
    []


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.671Z
  Event: EnterSubFlow(subFlowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.679Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.718Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), maySkipCheckpoint=false, fiber=D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86, )
  Actions: 
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86), errorState=Clean, numberOfSuspends=1), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState: 
    Unstarted(flowStart=Initiated, frozenFlowLogic=9C840BFAFEF87180297FAA11A22C16D28A9386120ADB1E723FBFFC909E557600)
    Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86)
checkpoint.numberOfSuspends: 
    0
    1
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.726Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Resume(result=class java.util.LinkedHashMap)
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-269754903461173927).receivedMessages: 
    [DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)]
    []
isFlowResumed: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.746Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.762Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.771Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchAttachmentsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.775Z
  Event: EnterSubFlow(subFlowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.775Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.FetchNetworkParametersFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.828Z
  Event: Suspend(ioRequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), maySkipCheckpoint=false, fiber=7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954, )
  Actions: 
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295}), frozenFiber=7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954), errorState=Clean, numberOfSuspends=2), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))])
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
checkpoint.flowState.frozenFiber.hash: 
    D1388E680F705D0B90E69BF14ECC3A5CED6BC2E9FDA4A7A43D0A731093587F86
    7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954
checkpoint.numberOfSuspends: 
    1
    2
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.839Z
  Event: DoRemainingWork
  Actions: 
    SendExisting(peerParty=O=Mock Company 1, L=London, C=GB, message=ExistingSessionMessage(recipientSessionId=SessionId(toLong=5404662063414377658), payload=DataSessionMessage(payload=class net.corda.core.serialization.SerializedBytes)), deduplicationId=SenderDeduplicationId(deduplicationId=DeduplicationId(toString=N-D-5404662063414377658--1785970533349416571-2-0), senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123))
    CreateTransaction
  Continuation: Resume(result=class kotlin.Unit)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.839Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.internal.ResolveTransactionsFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.854Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false), Inlined(flowClass=class net.corda.core.flows.ReceiveTransactionFlow, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.862Z
  Event: Suspend(ioRequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), maySkipCheckpoint=false, fiber=E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2, )
  Actions: 
    PersistCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Live(peerSinkSessionId=SessionId(toLong=5404662063414377658)), errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2), errorState=Clean, numberOfSuspends=3), isCheckpointUpdate=true)
    PersistDeduplicationFacts(deduplicationHandlers=[])
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[])
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.flowState.flowIORequest: 
    Send(sessionToMessage={FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))=768AED61FD2A58D74D7316731407E0600065080E1F3E6397EE4FA5AEFEE79295})
    Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))])
checkpoint.flowState.frozenFiber.hash: 
    7870ACA7A1945C3BCE9037DB4AFA6AC29A7717AD942B4E377F9882E2988C1954
    E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2
checkpoint.numberOfSuspends: 
    2
    3
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.862Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.959Z
  Event: DeliverSessionMessage(sessionMessage=ExistingSessionMessage(recipientSessionId=SessionId(toLong=-269754903461173927), payload=net.corda.node.services.statemachine.EndSessionMessage@7ea71761), deduplicationHandler=net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b, sender=O=Mock Company 1, L=London, C=GB)
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.sessions.SessionId(toLong=-269754903461173927).initiatedState: 
    Live(peerSinkSessionId=SessionId(toLong=5404662063414377658))
    Ended
pendingDeduplicationHandlers: 
    []
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.964Z
  Event: DoRemainingWork
  Actions: 
    CreateTransaction
  Continuation: Throw(throwable=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)
  Diff between previous and next state:
isFlowResumed: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.965Z
  Event: LeaveSubFlow
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.subFlowStack: 
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false), Inlined(flowClass=class bootcamp.TokenIssueFlowResponder$1, subFlowVersion=CoreFlow(platformVersion=5), isEnabledTimedFlow=false)]
    [Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)]


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.988Z
  Event: Error(exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)
  Actions: 
    RollbackTransaction
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState: 
    Clean
    Errored(errors=[FlowError(errorId=-8176102424188100050, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)], propagatedIndex=0, propagating=false)
isFlowResumed: 
    true
    false


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:45.996Z
  Event: DoRemainingWork
  Actions: 
    
  Continuation: ProcessEvents
  Diff between previous and next state:
null

 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:46.001Z
  Event: StartErrorPropagation
  Actions: 
    ScheduleEvent(event=DoRemainingWork)
  Continuation: ProcessEvents
  Diff between previous and next state:
checkpoint.errorState.propagating: 
    false
    true


 --- Transition of flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] ---
  Timestamp: 2020-04-14T08:38:46.084Z
  Event: DoRemainingWork
  Actions: 
    PropagateErrors(errorMessages=[ErrorSessionMessage(flowException=null, errorId=-8176102424188100050)], sessions=[Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)], senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123)
    CreateTransaction
    RemoveCheckpoint(id=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec])
    PersistDeduplicationFacts(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b])
    ReleaseSoftLocks(uuid=a5efe21d-2854-47ce-a8c2-e088dfa5ccec)
    CommitTransaction
    AcknowledgeMessages(deduplicationHandlers=[net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b])
    RemoveSessionBindings(sessionIds=[SessionId(toLong=-269754903461173927)])
    RemoveFlow(flowId=[a5efe21d-2854-47ce-a8c2-e088dfa5ccec], removalReason=ErrorFinish(flowErrors=[FlowError(errorId=-8176102424188100050, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)]), lastState=StateMachineState(checkpoint=Checkpoint(invocationContext=InvocationContext(origin=Peer(party=O=Mock Company 1, L=London, C=GB), trace=Trace(invocationId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Invocation, sessionId=4fdb9adb-86bb-4167-9627-2107fbe02ef5, timestamp: 2020-04-14T08:38:45.609Z, entityType: Session), actor=null, externalTrace=null, impersonatedActor=null), ourIdentity=O=Mock Company 2, L=London, C=GB, sessions={SessionId(toLong=-269754903461173927)=Initiated(peerParty=O=Mock Company 1, L=London, C=GB, peerFlowInfo=FlowInfo(flowVersion=1, appName=<unknown>), receivedMessages=[], initiatedState=Ended, errors=[], deduplicationSeed=D-5404662063414377658--1785970533349416571)}, subFlowStack=[Inlined(flowClass=class bootcamp.TokenIssueFlowResponder, subFlowVersion=CorDappFlow(platformVersion=5, corDappName=bootcamp-cordapp, corDappHash=C95E38AEE068B3A5026F8E7D7E3F9E9AD1F8F0E40A636B5BC229A03C184164C0), isEnabledTimedFlow=false)], flowState=Started(flowIORequest=Receive(sessions=[FlowSessionImpl(destination=O=Mock Company 1, L=London, C=GB, sourceSessionId=SessionId(toLong=-269754903461173927))]), frozenFiber=E3309D6EFC9E0D1A27E8957451AEEC4C239E0BBBFA6CBAEA6B229C4958FE45C2), errorState=Errored(errors=[FlowError(errorId=-8176102424188100050, exception=net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer)], propagatedIndex=1, propagating=true), numberOfSuspends=3), flowLogic=bootcamp.TokenIssueFlowResponder@79c8a69c, pendingDeduplicationHandlers=[], isFlowResumed=false, isTransactionTracked=false, isAnyCheckpointPersisted=true, isStartIdempotent=false, isRemoved=true, senderUUID=7c0cd82b-24da-462d-9246-1790f5c8d123))
  Continuation: Abort
  Diff between previous and next state:
checkpoint.errorState.propagatedIndex: 
    0
    1
pendingDeduplicationHandlers: 
    [net.corda.testing.node.internal.MockNodeMessagingService$InMemoryDeduplicationHandler@b84f37b]
    []
isRemoved: 
    false
    true
 {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
[WARN ] 2020-04-14T08:38:46,104Z [Mock network] interceptors.DumpHistoryOnErrorInterceptor. - Flow [a5efe21d-2854-47ce-a8c2-e088dfa5ccec] error [errorCode=1ggjwsp, moreInformationAt=https://errors.corda.net/OS/4.3/1ggjwsp] {fiber-id=10000002, flow-id=a5efe21d-2854-47ce-a8c2-e088dfa5ccec, invocation_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, invocation_timestamp=2020-04-14T08:38:45.609Z, origin=O=Mock Company 1, L=London, C=GB, session_id=4fdb9adb-86bb-4167-9627-2107fbe02ef5, session_timestamp=2020-04-14T08:38:45.609Z, thread-id=154, tx_id=176151F627DC6663095FD092239A960D8C238668C0E76371D3167C67CAE51D92}
net.corda.core.flows.UnexpectedFlowEndException: Tried to access ended session SessionId(toLong=-269754903461173927) with empty buffer
	at net.corda.node.services.statemachine.FlowStateMachineImpl.fillInLocalStackTrace(FlowStateMachineImpl.kt:175) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.processEventsUntilFlowIsResumed(FlowStateMachineImpl.kt:163) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.suspend(FlowStateMachineImpl.kt:448) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:67) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowSessionImpl.receive(FlowSessionImpl.kt:71) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:342) ~[corda-core-4.3.jar:?]
	at net.corda.core.flows.SignTransactionFlow.call(CollectSignaturesFlow.kt:252) ~[corda-core-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.subFlow(FlowStateMachineImpl.kt:330) ~[corda-node-4.3.jar:?]
	at net.corda.core.flows.FlowLogic.subFlow(FlowLogic.kt:326) ~[corda-core-4.3.jar:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:19) ~[main/:?]
	at bootcamp.TokenIssueFlowResponder.call(TokenIssueFlowResponder.java:7) ~[main/:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:270) ~[corda-node-4.3.jar:?]
	at net.corda.node.services.statemachine.FlowStateMachineImpl.run(FlowStateMachineImpl.kt:46) ~[corda-node-4.3.jar:?]
	at co.paralleluniverse.fibers.Fiber.run1(Fiber.java:1092) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.Fiber.exec(Fiber.java:788) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.doExec(RunnableFiberTask.java:100) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at co.paralleluniverse.fibers.RunnableFiberTask.run(RunnableFiberTask.java:91) ~[quasar-core-0.7.10-jdk8.jar:0.7.10]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_241]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) ~[?:1.8.0_241]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_241]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_241]
	at net.corda.node.utilities.AffinityExecutor$ServiceAffinityExecutor$1$thread$1.run(AffinityExecutor.kt:63) ~[corda-node-4.3.jar:?]
